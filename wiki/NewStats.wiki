#summary Representation of the new stats

== Overview ==

Right now, stats are basically embellished tallies; when a flag is touched, we
chalk one up for the runner, the runner's team, and the map.

== Problem ==

This loses a lot of information along the way, such as:

  * was the runner's flag out when the runner touched the flag?
  * was the runner's flag touched after the runner touched the flag?
  * did the runner himself kill the other team's runner/return the flag?
  * when did all this take place?
  * how long did the runner have the flag for?
  * frag rate during flag-holding.
  * all kinds of other stuff

== Data Breakdown ==

So let's keep with the runner example

|| statistic               || datatype                                       ||
|| picked                  || True/False                                     ||
|| flag_out_at_touch       || True/False                                     ||
|| flag_status_during_hold || List of flag events transpiring during hold    ||
|| runner_flag_drops       || List of frag events where runner dropped flag  ||
|| runner_flag_return      || List of flag events where runner returned flag ||
|| flag_hold_duration      || Decimal # of seconds                           ||
|| frags_during_hold       || List of frag events transpiring during hold    ||

== State ==

Ultimately, the new stats will add the concept of "state" to every event.
State can actually be fairly clearly defined (depending upon the statistic):

  * timestamp
  * flags out (and holding players)
    * time since own team's flag was taken
    * time since other team's flag was taken
  * current score

So, rather than just tallying up stuff like flag returns, etc., we can make
everything its own datatype, like:

{{{
{'players': {'Ladna': {'frags': {'Super Shotgun': {'Andal': [{'timestamp': '2008-04-28 13:29:59.042983',
                                                              'flag_held': True,
                                                              'flag_out': True,
                                                              'flag_drop': True,
                                                              'red_team_flags': 3,
                                                              'blue_team_flags': 3,
                                                              'green_team_flags': 0,
                                                              'white_team_flags': 0}]}}}},
            {'Andal': {'deaths': {'Super Shotgun': {'Ladna': [{'timestamp': '2008-04-28 13:29:59.042983',
                                                               'flag_held': True,
                                                               'flag_out': True,
                                                               'flag_loss': True,
                                                               'red_team_flags': 3,
                                                               'blue_team_flags': 3,
                                                               'green_team_flags': 0,
                                                               'white_team_flags': 0}]}}}}
}
}}}

So, a frag is really 4 things:

  * Fragger
  * Fraggee
  * Weapon
  * State

And frag state is really 4 things:

  * timestamp
  * score

And CTF frag state is really 4 things:

  * timestamp
  * flag held
  * flag out
  * score

== Process ==

Right now, !LogListener does most of the event handling, adding frags/deaths,
etc. etc.  We would modify the existing mechanism of Event handling so that,
instead of !LogListener doing most of the handling, we would make a basic
!LogListener Interface, that Player/Team/Map/BaseZServ/etc. would subclass.
Then we could move a ton of code out of !LogListener into those things that
actually listen.

