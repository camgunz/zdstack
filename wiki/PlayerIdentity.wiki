#summary Discussion on identity in ZDaemon

= Introduction =

The basic problem is this:

`Ladna` == `<!>Ladna` == `ladna`

Or even worse:

`[TC]Natural` == `[TC]natural` == `Natural` == `natural` == `[RFA]Demon` == `[RFA]demon` == `[rfa]demon`

And worse yet, lately there's been a guy named `Natural` playing in Duel servers who is not the same as `[TC]Natural`, but they have the same name.  In fact, `Natural` and `[TC]Natural` have way more in common (lexicographically speaking) than `[TC]Natural` and `[rfa]demon`, but that's the opposite of the identity commonality.  So what is a poor computer program to do?

Well, the current algorithm works like this:

  # Strip "clan" affiliation.  This tosses stuff like `[TC]` and `<!>`, and even leading or trailing `-X`'s (Thanks Mantis!)
  # Strip typical delimiters from names, like `'-'`, `'_'`, `' '`.
  # ignore case

So you can see that, in the case of the `Natural` problem, the algorithm would come back with two distinct players: `natural` and `demon`.  Of course, the issue isn't really resolved because we have the new `Natural` and the now-banned `natural/demon`, but you can't make a distinction like that without IP address lookups... which are dodgy anyway.  Indeed, it's kind of a betrayal of privacy to automatically resolve aliases to an IP and keep IP-based stats.  Furthermore, an IP address isn't identity because there are a few cases where players play from the same IP... but not always.

However, the worst thing of all is that players can join a server with the exact same name.  Conceivably, there can be 16 `"Natural"`'s in a server.  Due to the nature of zserv logging (only the player name is logged, not the IP or any other unique identifier), there is absolutely no way to determine which `Natural` did what.  In those cases, the stats are simply added together.  Fortunately, they don't count for anything, because the system could be gamed pretty easily.

I eventually came to the conclusion that if players want to screw stats up, they always can just by picking a different, completely unrelated name.  IP logging is only useful for a person specifically looking through and figuring aliases (or maybe a separate program with a clever algorithm), we simply can't attribute stats on an IP level and there's no way to get a player's aliases 100% of the time.  We can, however, homogenize their names so no matter if they leave their tag off, or change clans altogether, or if they change the capitalization/delimiting of their name, we'll see that they are the same player.

Some things to think about:

  * False Positives, either false player positives (`shadowghost`, `Shadow_Ghost`) or false team positives (`[LoC]`, `[LOC]`).
    * Maybe go with manual override, where you could keep a file of verbatim names that homogenize to the same thing, but are separate.
    * Or maybe go with a smarter algorithm, where if those players/teams both join a server their identity isn't just lexicographically different, but based on:
      * clan name ("tc")
      * clan delimiters ("[", "]")
      * IP address
      * team color
    This would have to remember the difference until both players/teams left, so that if only one of the players/teams left, the stats would remain separate instead of just being added together.  Plus, if one of the duplicates joins the wrong team at first and then switches (pretty likely, because you automatically join the team you were last on and that team might be the wrong one), or they both happen to be on the same IP address (far less likely considering all the other conditions they'd have to meet), then the algorithm will lump them together... or figure the wrong one moved to the other team.  In the end, even though it's not 100%, it's a lot better than nothing.