#summary Controlling server access in ZDStack
#labels Phase-Design

= Introduction =

Traditionally, access to ZDaemon servers can be limited using the banlist, and the `acl` configuration option (and associated commands).  Additionally, in order to make banlist management easier, ZDaemon servers can be configured to use bans from URL - allowing administrators to place global bans in a HTTP/FTP-accessible location, and customizing bans further on an individual server basis (if necessary) in the server's `zd_bans.txt` file.

= Advertised vs. Unadvertised Servers =

Advertised servers must enforce the ZDaemon master ban list.  Advertised ZDaemon servers download this list from http://zdaemon.ath.cx/bans/ on a preconfigured (and AFAIK immutable) interval.  Unadvertised servers have no such restrictions, and incidentally are not monitored by ZDaemon staff.

= Missing Access Control Features =

ZDaemon lacks the following access control features:

== Whitelisting addresses (individually and globally) ==

Whitelisting is only useful on advertised servers in the context of custom bans, but on unadvertised servers it is extremely useful.

== Application of ZDaemon master banlist to unadvertised servers ==

Many administrators would like to use the ZDaemon master banlist on their unadvertised servers in concert with whitelisted addresses.

== Global banlist (without an FTP or HTTP server) ==

HTTP/FTP servers require system resources, and some administrators would rather just use a locally-accessible file.

= General Problems in file-based Whitelist/Banlist Logic =

If we preserve ZDaemon's current banlist-handling system, then we have to intercept calls to `addban()` and make sure they don't conflict with an existing whitelist (wherever that list actually is).  Consider the following:

  * Ban('66.245.40.*')
  * Whitelist('66.245.40.72')
  * KillBan('66.245.40.*')
  * Ban('66.245.40.*')

Application of the whitelist requires breaking up the initial ban into:

  * Ban('66.245.40.0-71')
  * Ban('66.245.40.73-255')

otherwise the whitelist is completely ineffective.

Further, the ZDaemon banlist format doesn't support range bans in this format, when the bans are saved to `zd_bans.txt`, this would have to be written as individual address bans, i.e.:

{{{

66.245.40.0#<reason>
66.245.40.1#<reason>
...

}}}

As a consequence, saving bans in the form Ban('66.245.40.*') makes little sense.  Rather, `zd_bans.txt` should only hold individual bans, and the arguments to the various banlist-managing methods should expand wildcards... or do something to support range-style bans intelligently.

Finally, this means that editing `zd_bans.txt` directly should be discouraged, as it may conflict with an existing whitelist.

----

Actually it turns out that `zd_bans.txt` has a limit on how many bans it can contain, so whitelist implementation requires supplanting ZDaemon's ban-managing system.  `zd_bans.txt` is still honored, and of course ZDaemon master bans are not overriden, but all ban-related commands in ZDStack (with the exception of ZServ's methods) work on ZDStack's ban/whitelists, not ZDaemon's.