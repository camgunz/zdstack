#summary ZDStack Requirements.
#labels Featured,Phase-Requirements

= Supported Platforms =

ZDStack has been developed, tested, and used on 32-bit Linux (CentOS 5, Ubuntu 7.10 and 8.04).  It should work on any POSIX platform (Mac OS X, BSD, 64-bit varieties thereof) and bug reports to the contrary are welcome.  Windows will probably never work, and is unsupported.

= Basic Software Requirements =

In order to run, ZDStack requires the following:

  * zserv ([http://www.zdaemon.org])
    * zserv requires a file called an IWAD.  IWADs are contained in commercial versions of DooM (The Ultimate DooM, Plutonia, TNT, Final DooM, etc.).  The awesome Freedoom ([http://freedoom.sourceforge.net]) is a great alternative, although you'll be missing out on the intense battles of doom2map01.
  * Python 2.5 or greater ([http://www.python.org]) -- note: Python 3.0 or greater will not work
  * SQLAlchemy 0.5 or greater ([http://www.sqlalchemy.org])

The following features are available using only the above packages:

  * zserv process management (start | stop | restart)
  * Automatic zserv restarting in the event of a crash
  * Simple configuration for multiple zserv servers
  * Event processing and real-time statistics generation
  * Player => IP logging
  * An RPC interface using XML as a transport

= Optional Features and Their Requirements =

== JSON-RPC ==

Using JSON-RPC requires one of the following:

  * Python 2.6 (or greater)
  * The simplejson package ([http://code.google.com/p/simplejson/]).

If you don't have Python 2.6, installing simplejson is... simple: run `easy_install simplejson` at the command-prompt.   If you don't have the `easy_install` utility, visit the [http://peak.telecommunity.com/DevCenter/EasyInstall EasyInstall] webpage and follow the instructions there.

== Detached Database ==

By default, ZDStack uses the SQLite ([http://www.sqlite.org]) database engine.  However, SQLite cannot reliably be accessed over a network (including the Internet), and furthermore cannot reliably be accessed by more than one process at a time without complicated locking mechanisms, meaning that any front-end that needs access to the database (a stat viewer, for example) will most likely not function correctly, and may even prevent ZDStack from writing to the database, losing data.  ZDStack supports the use of other database engines without this limitation, but they each require third-party software packages -- many of which are C modules that require compilation.  For more information, visit DatabaseConfiguration.

= Hardware Requirements =

ZDStack has very modest hardware requirements, so it's easier to list its resource usage
than it is to spec a machine capable of running it.  Note, however, this is only ZDStack's resource usage, not its child zserv processes.

== Memory Usage ==

ZDStack should never use more than 40MB of RAM.  In fact it shouldn't even get close to that unless it's using an in-memory database -- in which case its memory usage can be unlimited if statistics are enabled.  On average it should only use between 15MB and 30MB.

Running ZDSWeb as a standalone webserver will consume an additional 8MB-10MB of RAM.

== Disk Space ==

ZDStack's installation files consume less than 2MB of disk space, and this includes the example configuration file and all HTML developer documentation.

ZDStack by default does not write the output of its zservs to disk, however, it can be configured to do so.  Additionally it generates a log file of its own.  All of these output files are rolled-over at midnight for simple maintenance.

If statistics are enabled and ZDStack is not using an in-memory database, statistics will be saved to disk.  The exact amount of space consumed depends upon the database engine used, and of course, the amount of time for which statistics have been saved.  Administration and maintenance of the database is left up to the user.

== CPU Usage ==

ZDStack is very easy on CPU, using little or no CPU most of the time -- even during RPC responses.  During startup and shutdown, however, ZDStack consumes as much CPU as it can.  ZDStack's startup and shutdown times should never exceed 3 seconds, so this period of high CPU usage is generally kept to a minimum.

== Top Shot ==

Here's a top shot of a ZDStack instance running 1 zserv.  A new round has been started roughly 20 times (no stat events occurred in these rounds, however), statistics are enabled, and an in-memory database is being used.  The zserv itself is running the IDL2009 WAD.

{{{
  PID USER  PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
19519 doom  20   0  261m 113m  26m S    2 11.4   4:29.86 firefox
25975 doom  20   0 42788  13m 1464 S    0  1.3   0:01.30 zserv
25968 doom  20   0 81808  11m 2096 S    0  1.1   0:03.32 zdstack debug
 6173 doom  20   0 12156 8344 1528 S    0  0.8   0:00.06 zdsweb -p 8080
}}}

Firefox is included for perspective, even though it's a notorious RAM hog (evidently).

== But mine is using a lot more VIRT than that top shot ==

That's because ZDStack and its spawned zservs are sharing the same "memory".  So your ZDStack process is going to use a specific amount of VMEM, and every `zserv` it spawns will add to that amount.  The good news is that the memory isn't consumed twice, so you can safely disregard that huge VIRT number.