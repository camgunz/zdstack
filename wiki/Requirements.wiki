#summary ZDStack Requirements.
#labels Featured,Phase-Requirements

= Supported Platforms =

ZDStack has been developed, tested, and used on 32-bit Linux (CentOS 5, Ubuntu 7.10 and 8.04, and Slackware 12.2).  It should work on any POSIX platform (Mac OS X, BSD, 64-bit varieties thereof) and bug reports to the contrary are welcome.  Windows will probably never work, and is unsupported (see WindowsSupport).

= Basic Software Requirements =

In order to run, ZDStack requires the following:

  * zserv ([http://www.zdaemon.org])
    * zserv requires a file called an IWAD.  IWADs are contained in commercial versions of DooM (The Ultimate DooM, Plutonia, TNT, Final DooM, etc.).  The awesome Freedoom ([http://freedoom.sourceforge.net]) is a great alternative, although you'll be missing out on the intense battles of doom2map01.
  * Python 2.5 or greater ([http://www.python.org]) -- note: Python 3.0 or greater will not work
  * SQLAlchemy 0.5.5 or greater ([http://www.sqlalchemy.org])

The following features are available using only the above packages:

  * zserv process management (start | stop | restart)
  * Automatic zserv restarting in the event of a crash
  * Simple configuration for multiple zserv servers
  * Event processing and real-time statistics generation
  * Player => IP logging
  * An RPC interface using XML as a transport

= Optional Features and Their Requirements =

== JSON-RPC ==

Using JSON-RPC requires one of the following:

  * Python 2.6 (or greater)
  * The simplejson package ([http://code.google.com/p/simplejson/]).

If you don't have Python 2.6, installing simplejson is... simple: run `easy_install simplejson` at the command-prompt.   If you don't have the `easy_install` utility, visit the [http://peak.telecommunity.com/DevCenter/EasyInstall EasyInstall] webpage and follow the instructions there.

== Detached Database ==

By default, ZDStack uses the SQLite ([http://www.sqlite.org]) database engine.  However, SQLite cannot reliably be accessed over a network (including the Internet), and furthermore cannot reliably be accessed by more than one process at a time without complicated locking mechanisms, meaning that any front-end that needs access to the database (a stat viewer, for example) will most likely not function correctly, and may even prevent ZDStack from writing to the database, losing data.  ZDStack supports the use of other database engines without this limitation, but they each require third-party software packages -- many of which are C modules that require compilation.  For more information, visit DatabaseConfiguration.

= Hardware Requirements =

ZDStack has very modest hardware requirements, so it's easier to list its resource usage
than it is to spec a machine capable of running it.  Note, however, this is only ZDStack's resource usage, not its child zserv processes.

== Memory Usage ==

ZDStack should never use more than 40MB of RAM.  In fact it shouldn't even get close to that unless it's using an in-memory database -- in which case its memory usage can be unlimited if statistics are enabled.  On average it should only use between 15MB and 30MB.

Running ZDSWeb as a standalone webserver will consume an additional 8MB-10MB of RAM.

== Disk Space ==

ZDStack's installation files consume less than 2MB of disk space, and this includes the example configuration file and all HTML developer documentation.

ZDStack by default does not write the output of its zservs to disk, however, it can be configured to do so.  Additionally it generates a log file of its own.  All of these output files are rolled-over at midnight for simple maintenance.

If statistics are enabled and ZDStack is not using an in-memory database, statistics will be saved to disk.  The exact amount of space consumed depends upon the database engine used, and of course, the amount of time for which statistics have been saved.  Administration and maintenance of the database is left up to the user.

== CPU Usage ==

ZDStack is very easy on CPU, using little or no CPU most of the time -- even during RPC responses.  During startup and shutdown, however, ZDStack consumes as much CPU as it can.  ZDStack's startup and shutdown times should never exceed 3 seconds, so this period of high CPU usage is generally kept to a minimum.

== Top Shot ==

Here's a top shot of a ZDStack instance running 14 zservs for over 9 hours, using the MySQL database engine.

{{{
  PID USER     PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 6173 doom     20   0 12156 8344 1528 S    0  0.8   0:00.06 ./zdsweb -p 8080
25614 doom     24   0  312m  20m 2068 S    0  1.0   1:26.52 ./zdstack start
25631 doom     15   0 38160  13m 1648 S    0  0.7   0:10.06 zserv
25623 doom     15   0 38156  13m 1604 S    0  0.7   0:09.36 zserv
25627 doom     15   0 38164  13m 1548 S    0  0.7   0:06.93 zserv
25648 doom     15   0 38152  13m 1528 S    0  0.7   0:05.97 zserv
25656 doom     15   0 38156  13m 1476 S    0  0.7   0:00.59 zserv
25635 doom     15   0 37472  12m 1632 S    0  0.6   0:13.29 zserv
25653 doom     15   0 37392  12m 1552 S    0  0.6   0:23.04 zserv
25647 doom     15   0 37132  12m 1576 S    0  0.6   0:03.71 zserv
25651 doom     15   0 37128  11m 1648 S    1  0.6   0:13.85 zserv
25638 doom     15   0 37132  11m 1808 S    0  0.6   0:21.61 zserv
25621 doom     15   0 37140  10m 1740 S    0  0.5   0:17.87 zserv
25625 doom     15   0 37128 9376 1616 S    0  0.5   0:02.37 zserv
25628 doom     15   0 37144 9248 1544 S    0  0.5   0:01.65 zserv
25633 doom     15   0 37132 9148 1472 S    0  0.4   0:01.84 zserv
}}}

== Whoa that's a lot of VIRT usage ==

That's because ZDStack and its spawned zservs are sharing the same "memory".  So your ZDStack process is going to use a specific amount of VMEM, and every `zserv` it spawns will add to that amount.  The good news is that the memory isn't consumed twice, so you can safely disregard that huge VIRT number.