#!/usr/bin/env python

import sys
import getopt

from ZDStack import get_configparser, HOSTNAME

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, "Error: %s" % (msg)
    print >> sys.stderr, """\nzservctl\n
Usage:
    zservctl start -n [ zserv_name ] -c [ config_file ]
    zservctl stop -n [ zserv_name ] -c [ config_file ]
    zservctl restart -n [ zserv_name ] -c [ config_file ]
    zservctl start-all -c [ config_file ]
    zservctl stop-all -c [ config_file ]
    zservctl restart-all -c [ config_file ]
    zservctl reload-config -c [ config_file ]\n\n"""
    sys.exit(-1)

actions = ('start', 'stop', 'restart', 'start-all', 'stop-all', 'restart-all',
           'reload-config')
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'n:c:', [])
except getopt.GetoptError, ge:
    print_usage(ge)
if len(args) != 1 or args[0] not in actions:
    print_usage("Invalid number of arguments, or invalid action specified")
opts = dict(opts)
action = args[0]
if not '-c' in opts:
    cp = get_configparser(None)
else:
    cp = get_configparser(opts['-c'])
if 'zdstack_port' not in cp.defaults():
    print_usage("Option 'zdstack_port' not found in configuration file")
if not 'rpc_protocol' in cp.defaults():
    raise Exception("Could not find option 'rpc_protocol' in config")
if cp.defaults()['rpc_protocol'].lower() in ('json', 'jsonrpc', 'json-rpc'):
    from jsonrpc import ServiceProxy as BaseProxy
elif cp.defaults()['rpc_protocol'].lower() in ('xml', 'xmlrpc', 'xml-rpc'):
    from xmlrpclib import ServerProxy as BaseProxy
else:
    raise Exception("Invalid RPC Type: [%s]" % (cp.defaults()['rpc_protocol']))

address = 'http://%s:%s' % (HOSTNAME, cp.defaults()['zdstack_port'])
proxy = BaseProxy(address)

#
# I'm not a huge fan of eval, but it's so easy I can't resist.
#

def server(method_name, *args):
    try:
        return eval("proxy." + method_name + "(*args)")
    except Exception, e:
        if not hasattr(e, 'traceback') and not hasattr(e, 'error'):
            raise
        else:
            if hasattr(e, 'error'):
                try:
                    print >> sys.stderr, "\n%s: %s\n" % (e.error['name'],
                                                         e.error['message'])
                    if 'traceback' in e.error:
                        print >> sys.stderr, e.error['traceback']
                except:
                    raise e
            else:
                raise

if action in ('start', 'stop', 'restart'):
    if not '-n' in opts:
        print_usage("Must specify a ZServ instance")
    if action == 'start':
        server('start_zserv', *[opts['-n']])
    elif action == 'stop':
        server('stop_zserv', *[opts['-n']])
    elif action == 'restart':
        server('restart_zserv', *[opts['-n']])
else:
    if '-n' in opts:
        print_usage("Action [%s] does not take a ZServ instance" % (action))
    if action == 'start-all':
        server('start_all_zservs')
    elif action == 'stop-all':
        server('stop_all_zservs')
    elif action == 'restart-all':
        server('restart_all_zservs')
    elif action == 'reload-config':
        server('reload_config')

