0.11.0 ---
  Features --
    Stats are now saved in a database
    Events/Stats/Plugins can now be reliably disabled
    add_mapnum_to_hostname now works
    zserv logfiles are no longer required, and no longer generated by default
      (they can be configured to generate, however, using save_logfile in the
       config)
    The address ZDStack listens on for RPC commands can now be explicitly
      configured
    RPC methods now require authentication -- ones that should require
      authentication anyway
    The log folder and PID file can now be explicitly defined
    JSON-RPC now works interchangeably with XML-RPC
    Added the ZDSWeb administration interface
    Added support for 1.08.08 log files (containing timestamped events)
    Rapidly respawning ZServs are now detected and stopped
    Duplicate ports in the configuration file are now detected
    Required folders are now created when possible
    JSON-RPC now supports either the simplejson package, or Python 2.6's json
      module
    Much more state is now saved in events, such as whether players were
      holding flags, team scores, etc.
    Limited RCON is now supported
    zdrpc can now either print the zserv's response as lines from the log, or
      as event data dicts
    The python documentation files are now generated using sphinx, which is a
      big improvement over the ugliness that was pydoc
  Fixes ---
    If an option was defined in the DEFAULT section, as a game_mode default,
      and in the server's own configuration section, the game_mode default
      would take precedent
    Only some options were supported as game_mode defaults.  Now the logic is
      applied to all server-specific options
    Random problems while dealing with a running ZDStack process were fixed,
      including changing the configuration file,
      starting/stopping/removing/adding servers, etc.
    reload-config was a zservctl action... which didn't make any sense, so it's
      now a zdstack action
    It is now possible to change the game mode of a server, running or
      otherwise, even though it requires a zserv restart
    If errors were present in the configuration file and it was reloaded, the
      current good configuration would be overwritten with bad values
    Getting/Setting ZServ configs did not work
    RAM and CPU usage are drastically reduced
    Threading was out of control in 0.10 - most things are now centralized in
      the main ZDStack thread, preventing lots of threading bugs like CPU
      spinning, errors during shutdown, etc.
    There were many race conditions and non-threadsafe areas of the code, most
      if not all of which have been resolved

0.10.1 ---
  Added a bunch of FakeZServ stuff for log parsing, both Client and Server

0.10 RC4 ---
  Inadvertently included the 0.10-RC2 tarball in the 0.10-RC3 tarball, removed

0.10 RC3 ---
  Typo in zservctl, fixed.

0.10 RC2 ---
  Added make_release.sh script for easy packaging
  Fixed "Expected int, got string" error when using zservctl
  Added support for JSON-RPC to zservctl
  Fixed error when reloading configuration
  Removed unnecessary complexities in the config_file logic
  Added default Dual and FFA fraglimits in the example config
  Increased the restart sleep amount to give the server enough time to shutdown
  Modified stats to hold player instances in a Listable so that players with
    the same name can exist if their IP addresses and ports are different
  Fixed design problem with zservctl

0.10 RC1 ---
  Added JSON-RPC as an RPC protocol option
  Added plugin system
  Changed the internal representation of Frags and Deaths, less load on
    frontends this way
  Added LICENSE, README, INSTALL and CHANGES files
  Changed license to MIT license
  Added PyDoc documentation for Plugin authors
  Added numerous RPC methods other that the basic "send_to_zserv()" method,
    for easier API usage
  Renamed zdstackctl to zdstack

0.9 ---
  Initial public release
