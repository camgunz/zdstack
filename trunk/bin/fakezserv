#!/usr/bin/env python -u

import sys
import time
import signal
import os.path
import datetime

from ZDStack import TICK, get_configparser
from ZDStack.Utils import resolve_path, get_event_from_line
from ZDStack.ZDSRegexps import get_server_regexps

REGEXPS = get_server_regexps()
###
# Fake ZServ needs to do the following:
#
# - Line by line, write the log file to the current general log.
# - Should a line be a command response line, don't write that line to the log
#   and stop writing until a command asking for that response is read from
#   STDIN
#
###

class FakeZServ:

    def __init__(self, input_log_file, output_log_file):
        self.shutting_down = False
        self.__input_log_fobj = open(input_log_file, 'rb')
        self.__output_log_file = output_log_file

    @property
    def debug_log_filename(self):
        cp = get_configparser()
        log_folder = cp.getpath('DEFAULT', 'zdstack_log_folder')
        return os.path.join(log_folder, 'fakezserv_logfile.log')

    def handle_signal(self, frame, signum):
        sys.exit(0)

    def wait_for_command(self):
        self.debug("Waiting for command")
        command = sys.stdin.readline()
        self.debug("Got command [%s]" % (command.strip()))
        return command

    def _append_to_file(self, message, filename):
        fobj = open(filename, 'a+b')
        fobj.write(message)
        if not message.endswith('\n'):
            fobj.write('\n')
        fobj.flush()
        fobj.close()

    def debug(self, message):
        message = '[%s] ' % (datetime.datetime.now()) + message
        self._append_to_file(message, self.debug_log_filename)

    def write_to_genlog(self, line):
        self.debug("Writing '%s' to genlog" % (line.strip()))
        self._append_to_file(line, self.__output_log_file)

    def start(self):
        line = self.__input_log_fobj.readline()
        in_command = False
        while line:
            try:
                event = get_event_from_line(line, REGEXPS)
                if event:
                    if event.category == 'command' and \
                       event.type != 'map_change':
                        self.debug("Got command event: %s" % (in_command))
                        if not in_command:
                            self.wait_for_command()
                            in_command = True
                    else:
                        self.debug("Got generic event: %s" % (in_command))
                        in_command = False
                else:
                    self.debug("Got junk event: %s" % (in_command))
                    in_command = False
                self.write_to_genlog(line)
                time.sleep(TICK)
                line = self.__input_log_fobj.readline()
            except:
                import traceback
                self.debug(traceback.format_exc())
                raise
        while 1:
            time.sleep(TICK)

def print_usage():
    script_name = os.path.basename(sys.argv[0])
    print >> sys.stderr, """
Usage: %s [ input_log_file ] [ output_file ]
""" % (script_name)
    sys.exit(1)

if __name__ == "__main__":
    if not len(sys.argv) == 3:
        print_usage()
    input_log_file = resolve_path(sys.argv[1])
    output_log_file = resolve_path(sys.argv[2])
    if not os.path.isfile(input_log_file):
        raise Exception("Couldn't locate input log file")
    zs = FakeZServ(input_log_file, output_log_file)
    for s in (signal.SIGHUP, signal.SIGINT, signal.SIGTERM):
        signal.signal(s, zs.handle_signal)
    zs.start()

