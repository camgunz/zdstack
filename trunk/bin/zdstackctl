#!/usr/bin/env unbuffered_python

import os
import sys
import getopt
import signal
import os.path
from ZDStack.Stack import Stack
from pyfileutils import read_file, write_file

def fork(logfile, pidfile, signal_handler):
    if hasattr(os, 'devnull'):
        stdin = os.devnull
    else:
        stdin = '/dev/null'
    stdout = stderr = logfile
    if os.fork():
        os._exit(0)
    # os.chdir('/')
    os.umask(0)
    os.setsid()
    if os.fork():
        os._exit(0)
    sys.stdout.flush()
    sys.stderr.flush()
    si = open(stdin, 'r')
    so = open(logfile, 'a+')
    se = open(logfile, 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGQUIT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGHUP, signal_handler)
    pid = str(os.getpid())
    write_file(pid, pidfile)

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, msg
    print >> sys.stderr, """\nzdstackctl\n
Usage: zdstackctl [ start | stop | restart ] [-c config file]\n"""
    sys.exit(-1)

def start(config_file, debug=False):
    print "Start: using config_file: [%s]" % (config_file)
    try:
        zdstack = Stack(config_file)
        if os.path.isfile(zdstack.pidfile):
            print >> sys.stderr, "\nThis server is already running: %s\n" % (zdstack.pidfile)
            sys.exit(-1)
        if not debug:
            fork(zdstack.logfile, zdstack.pidfile, zdstack.handle_signal)
        zdstack.startup()
    except Exception, e:
        raise # for debugging
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def stop(config_file=None):
    try:
        zdstack = Stack(config_file)
        try:
            os.kill(int(read_file(zdstack.pidfile)), signal.SIGTERM)
        except OSError:
            if os.path.isfile(zdstack.pidfile):
                es = "\nServer not running, removing stale PID file.\n"
                print >> sys.stderr, es
                os.unlink(zdstack.pidfile)
            else:
                raise
    except Exception, e:
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def restart(config_file):
    stop(config_file)
    time.sleep(1)
    start(config_file)

actions = ('start', 'stop', 'restart', 'debug')
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:', [])
except getopt.GetoptError, ge:
    print >> sys.stderr, "Error: %s" % (ge)
    print_usage()
if len(args) != 1 or args[0] not in actions:
    print >> sys.stderr, "Error: %s" % \
            ("Invalid number of arguments, or invalid action specified")
    print_usage()
opts = dict(opts)
action = args[0]
if not '-c' in opts:
    print "Setting config_file to None"
    config_file = None
else:
    config_file = opts['-c']
    print "Using config_file [%s]" % (config_file)
if action == 'start':
    start(config_file)
elif action == 'stop':
    stop(config_file)
elif action == 'restart':
    restart(config_file)
elif action == 'debug':
    start(config_file, debug=True)

