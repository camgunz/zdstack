#!C:\Python26\python.exe

from __future__ import with_statement

import os
import sys
import json
import getopt
import datetime

from ZDStack import set_configfile, get_configparser, initialize_database, \
                    get_engine, set_debugging, get_zdslog
from ZDStack.Utils import resolve_path
from ZDStack.LogEvent import LogEvent
from ZDStack.ZDSEventHandler import ManualEventHandler

zdslog = get_zdslog()

DEBUGGING = True

def stderr(s):
    print >> sys.stderr, s

def print_usage(msg=None):
    if msg:
        stderr('\n' + msg)
    script_name = os.path.basename(sys.argv[0])
    us = '\nUsage: %s [ -c config_file ] [ event_file ]\n'
    stderr(us % (script_name))
    sys.exit(1)

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:', [])
except GetoptError, ge:
    print_usage(msg=str(ge))
opts = dict(opts)
if not len(args):
    print_usage('Must specify an event file')
elif len(args) > 1:
    print_usage('Invalid number of argument specified')
event_file = resolve_path(args[0])
if not os.path.isfile(event_file):
    print_usage('Could not find event file %s' % (event_file))
if '-c' in opts:
    config_file = resolve_path(opts['-c'])
    if not os.path.isfile(config_file):
        print_usage('Could not find configuration file %s' % (config_file))
    set_configfile(resolve_path(opts['-c']))
if DEBUGGING:
    set_debugging(True)
cp = get_configparser() # implicitly loads configuration
initialize_database()
engine = get_engine()   # implicitly loads the SQLAlchemy DB engine
event_fobj = open(event_file, 'rb')
event_dicts = json.loads(event_fobj.read())['events']
event_handler = ManualEventHandler()
epoch = datetime.datetime(1970, 1, 1)
for ed in event_dicts:
    seconds, microseconds = map(int, ed['timestamp'].split('.'))
    td = datetime.timedelta(seconds=seconds, microseconds=microseconds)
    event = LogEvent(epoch + td, ed['type'], ed['data'], ed['category'])
    # zdslog.debug('Handling event %r' % (event))
    print repr(event)
    event_handler.get_handler(event.category)(event)
    # if event.type == 'map_change':
    #     print 'New map: %(name)s' % (event.data)
    #     print 'Round ID: %s' % (event_handler.round_id)

