#!/usr/bin/env python

import sys
import getopt

from ZDStack import NO_AUTH_REQUIRED, set_configfile, get_configparser, \
                    get_server_proxy
from ZDStack.Utils import send_proxy_method

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, "Error: %s" % (msg)
    print >> sys.stderr, """\nzservctl\n
Usage:
    zservctl start -n [ zserv_name ] -c [ config_file ]
    zservctl stop -n [ zserv_name ] -c [ config_file ]
    zservctl restart -n [ zserv_name ] -c [ config_file ]
    zservctl start-all -c [ config_file ]
    zservctl stop-all -c [ config_file ]
    zservctl restart-all -c [ config_file ]
    zservctl reload-config -c [ config_file ]\n\n"""
    sys.exit(-1)

actions = ('start', 'stop', 'restart', 'start-all', 'stop-all', 'restart-all')

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'n:c:', [])
except getopt.GetoptError, ge:
    print_usage(ge)
if len(args) != 1 or args[0] not in actions:
    print_usage("Invalid number of arguments, or invalid action specified")
opts = dict(opts)
action = args[0]
if '-c' in opts:
    set_configfile(opts['-c'])
cp = get_configparser()
proxy = get_server_proxy()

args = []

if action not in NO_AUTH_REQUIRED:
    username = cp.get('DEFAULT', 'zdstack_username')
    password = cp.get('DEFAULT', 'zdstack_password')
    args.extend([username, password])

if action in ('start', 'stop', 'restart'):
    if not '-n' in opts:
        print_usage("Must specify a ZServ name")
    args.append(opts['-n'])
    if action == 'start':
        send_proxy_method(proxy, 'start_zserv', *args)
    elif action == 'stop':
        send_proxy_method(proxy, 'stop_zserv', *args)
    elif action == 'restart':
        send_proxy_method(proxy, 'restart_zserv', *args)
else:
    if '-n' in opts:
        print_usage("Action [%s] does not require a ZServ name" % (action))
    if action == 'start-all':
        send_proxy_method(proxy, 'start_all_zservs', *args)
    elif action == 'stop-all':
        send_proxy_method(proxy, 'stop_all_zservs', *args)
    elif action == 'restart-all':
        send_proxy_method(proxy, 'restart_all_zservs', *args)

