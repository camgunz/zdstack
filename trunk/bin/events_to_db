#!C:\Python26\python.exe

from __future__ import with_statement

import os
import sys
import getopt
import datetime

from ZDStack import set_configfile, get_configparser, initialize_database, \
                    get_engine, set_debugging, get_zdslog
from ZDStack.Utils import resolve_path
from ZDStack.LogEvent import LogEvent
from ZDStack.ZDSEventHandler import ManualEventHandler

zdslog = get_zdslog()

DEBUGGING = True

def stderr(s):
    print >> sys.stderr, s

def print_usage(msg=None):
    if msg:
        stderr('\n' + msg)
    script_name = os.path.basename(sys.argv[0])
    us = '\nUsage: %s [ -c config_file ] [ event_file ]\n'
    stderr(us % (script_name))
    sys.exit(1)

try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:m:', [])
except GetoptError, ge:
    print_usage(msg=str(ge))
opts = dict(opts)
if not len(args):
    print_usage('Must specify an event file')
elif len(args) > 1:
    print_usage('Invalid number of argument specified')
event_file = resolve_path(args[0])
if not os.path.isfile(event_file):
    print_usage('Could not find event file %s' % (event_file))
if '-c' in opts:
    config_file = resolve_path(opts['-c'])
    if not os.path.isfile(config_file):
        print_usage('Could not find configuration file %s' % (config_file))
    set_configfile(resolve_path(opts['-c']))
if DEBUGGING:
    set_debugging(True)
cp = get_configparser() # implicitly loads configuration
initialize_database()
engine = get_engine()   # implicitly loads the SQLAlchemy DB engine
execfile(event_file)    # places 'events' in the global scope
event_handler = ManualEventHandler()
for event in events:
    zdslog.debug("Handling event %r" % (event))
    if event.type in ('team_join', 'team_switch'):
        print repr(event)
    # elif event.category == 'flag':
    #     print "Handling event %r" % (event)
    event_handler.get_handler(event.category)(event)
    if event.type == 'map_change':
        print 'New map: %(name)s' % (event.data)
        print 'Round ID: %s' % (event_handler.round_id)

