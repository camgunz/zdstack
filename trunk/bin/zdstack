#!/usr/bin/env python -u

import os
import sys
import time
import getopt
import signal

from pyfileutils import read_file, write_file

from ZDStack import set_configfile, get_configparser, get_server_proxy
from ZDStack.Stack import Stack

def fork(debug=False):
    if hasattr(os, 'devnull'):
        devnull = os.devnull
    else:
        devnull = '/dev/null'
    if os.fork():
        os._exit(0)
    os.chdir('/')
    os.umask(0)
    os.setsid()
    if os.fork():
        os._exit(0)
    sys.stdout.flush()
    sys.stderr.flush()
    if not debug:
        sys.stdin = open(devnull, 'r')
        sys.stdout = open(devnull, 'a+')
        sys.stderr = open(devnull, 'a+')

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, msg
    script_name = os.path.basename(os.path.expanduser(sys.argv[0]))
    print >> sys.stderr, """\n%s\n
Usage: %s [ start | stop | restart | reload-config ] [ -c config file ]
""" % (script_name, script_name)
    sys.exit(-1)

def start(config_file, debug=False):
    print "Starting ZDStack"
    if config_file:
        print "Setting configuration file to %s" % (config_file)
        set_configfile(config_file)
    try:
        print "Initializing ZDStack"
        zdstack = Stack(debugging=debug)
        if os.path.isfile(zdstack.pidfile):
            es = "\nZDStack is already running: %s\n"
            print >> sys.stderr, es % (zdstack.pidfile)
            zdstack.shutdown(retval=-1)
        print "Forking"
        fork(debug)
        print "Done forking"
        if debug:
            print "PID: ", os.getpid()
        print "Starting up"
        zdstack.startup()
        print "Done starting up"
    except Exception, e:
        if debug:
            raise
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def stop(config_file=None):
    if config_file:
        set_configfile(configfile)
    try:
        zdstack = Stack(stopping=True)
        try:
            os.kill(int(read_file(zdstack.pidfile)), signal.SIGTERM)
        except (OSError, IOError):
            if os.path.isfile(zdstack.pidfile):
                es = "\nZDStack not running, removing stale PID file.\n"
                print >> sys.stderr, es
                os.unlink(zdstack.pidfile)
            else:
                es = "\nZDStack not running\n"
                print >> sys.stderr, es
            zdstack.shutdown(retval=-1)
    except Exception, e:
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def restart(config_file):
    stop(config_file)
    print "Waiting for ZDStack to shut down"
    time.sleep(5)
    print "Starting whether ZDStack has exited or not (this is normal)"
    start(config_file)

actions = ('start', 'stop', 'restart', 'debug', 'reload-config')
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:', [])
except getopt.GetoptError, ge:
    print >> sys.stderr, "Error: %s" % (ge)
    print_usage()
if len(args) != 1 or args[0] not in actions:
    print >> sys.stderr, "Error: %s" % \
            ("Invalid number of arguments, or invalid action specified")
    print_usage()
opts = dict(opts)
action = args[0]
if not '-c' in opts:
    config_file = None
else:
    config_file = opts['-c']
if action == 'start':
    start(config_file)
elif action == 'stop':
    stop(config_file)
elif action == 'restart':
    restart(config_file)
elif action == 'debug':
    start(config_file, debug=True)
elif action == 'reload-config':
    if config_file:
        set_configfile(config_file)
    cp = get_configparser() # implicitly loads the configuration file as well
    get_server_proxy().reload_config()

