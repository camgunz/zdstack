#!/usr/local/bin/python -u

import os
import sys
import time
import getopt
import signal

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, msg
    script_name = os.path.basename(os.path.expanduser(sys.argv[0]))
    print >> sys.stderr, """\n%s\n
Usage: %s [ start | stop | restart | reload-config ] [ -c config file ]
""" % (script_name, script_name)
    sys.exit(-1)

def start(config_file=None, debug=False, restart=False):
    try:
        from ZDStack import set_debugging, set_configfile, get_configparser, \
                            get_zdslog, initialize_database
        if debug:
            set_debugging(True)
        if config_file:
            set_configfile(config_file)
        cp = get_configparser()
        pid_file = cp.getpath('DEFAULT', 'zdstack_pid_file')
        if os.path.isfile(pid_file):
            if restart:
                es = "\nZDStack is still running: %s\n"
            else:
                es = "\nZDStack is already running: %s\n"
            print >> sys.stderr, es % (pid_file)
            sys.exit(-1)
        print "\nStarting ZDStack\n"
        ###
        # ###
        # # We need to re-init logging, because its file-descriptors were
        # # closed.
        # ###
        # get_zdslog(reload=True)
        # ###
        # # Finally we can initialize the database.
        # ###
        ###
        initialize_database()
        from ZDStack.Stack import Stack
        Stack().startup()
    except Exception, e:
        if debug:
            raise
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def stop(config_file=None):
    from ZDStack import set_configfile, get_configparser
    try:
        if config_file:
            set_configfile(config_file)
        cp = get_configparser()
        pid_file = cp.getpath('DEFAULT', 'zdstack_pid_file')
        try:
            pid_fobj = open(pid_file)
            pid = int(pid_fobj.read())
            pid_fobj.close()
            os.kill(pid, signal.SIGTERM)
            print "\nStopping ZDStack\n"
        except (OSError, IOError):
            if os.path.isfile(pid_file):
                es = "\nZDStack not running, removing stale PID file.\n"
                print >> sys.stderr, es
                os.unlink(pid_file)
            else:
                es = "\nZDStack not running\n"
                print >> sys.stderr, es
                sys.exit(-1)
    except Exception, e:
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def restart(config_file=None):
    print "\nRestarting ZDStack"
    stop()
    print "Waiting for ZDStack to shut down"
    time.sleep(5)
    start(config_file, debug=False, restart=True)

def reload_config():
    from ZDStack import get_configparser, get_server_proxy
    cp = get_configparser() # implicitly loads the configuration file as well
    username = cp.get('DEFAULT', 'zdstack_username')
    password = cp.get('DEFAULT', 'zdstack_password')
    get_server_proxy().reload_config(username, password)

actions = ('start', 'stop', 'restart', 'debug', 'reload-config')
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:', [])
except getopt.GetoptError, ge:
    print >> sys.stderr, "Error: %s" % (ge)
    print_usage()
if len(args) != 1 or args[0] not in actions:
    print >> sys.stderr, "Error: %s" % \
            ("Invalid number of arguments, or invalid action specified")
    print_usage()
opts = dict(opts)
action = args[0]
config_file = None
if '-c' in opts:
    config_file = opts['-c']
if action == 'debug':
    start(debug=True)
elif action == 'start':
    start(config_file, debug=False, restart=False)
elif action == 'stop':
    stop(config_file)
elif action == 'restart':
    restart(config_file)
elif action == 'reload-config':
    reload_config()

