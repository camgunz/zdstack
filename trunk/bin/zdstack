#!/usr/bin/env python -u

import os
import sys
import time
import getopt
import signal

from pyfileutils import read_file, write_file

from ZDStack import set_debugging, set_configfile, get_configparser, \
                    get_server_proxy

def fork(debug=False):
    if hasattr(os, 'devnull'):
        devnull = os.devnull
    else:
        devnull = '/dev/null'
    if os.fork():
        os._exit(0)
    os.chdir('/')
    os.umask(0)
    os.setsid()
    if os.fork():
        os._exit(0)
    sys.stdout.flush()
    sys.stderr.flush()
    sys.stdin.close()
    sys.stdin = open(devnull, 'r')
    if not debug:
        sys.stdout.close()
        sys.stderr.close()
        sys.stdout = open(devnull, 'a+')
        sys.stderr = open(devnull, 'a+')

def print_usage(msg=None):
    if msg:
        print >> sys.stderr, msg
    script_name = os.path.basename(os.path.expanduser(sys.argv[0]))
    print >> sys.stderr, """\n%s\n
Usage: %s [ start | stop | restart | reload-config ] [ -c config file ]
""" % (script_name, script_name)
    sys.exit(-1)

def start(debug=False, restart=False):
    try:
        cp = get_configparser()
        pid_file = cp.getpath('DEFAULT', 'zdstack_pid_file')
        if os.path.isfile(pid_file):
            if restart:
                es = "\nZDStack is still running: %s\n"
            else:
                es = "\nZDStack is already running: %s\n"
            print >> sys.stderr, es % (pid_file)
            sys.exit(-1)
        print "\nStarting ZDStack\n"
        from ZDStack.Stack import Stack
        zdstack = Stack()
        fork(debug)
        zdstack.startup()
    except Exception, e:
        if debug:
            raise
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def stop():
    try:
        cp = get_configparser()
        pid_file = cp.getpath('DEFAULT', 'zdstack_pid_file')
        try:
            os.kill(int(read_file(pid_file)), signal.SIGTERM)
            print "\nStopping ZDStack\n"
        except (OSError, IOError):
            if os.path.isfile(pid_file):
                es = "\nZDStack not running, removing stale PID file.\n"
                print >> sys.stderr, es
                os.unlink(pid_file)
            else:
                es = "\nZDStack not running\n"
                print >> sys.stderr, es
                sys.exit(-1)
    except Exception, e:
        print >> sys.stderr, "\nError: %s\n" % (str(e))
        sys.exit(-1)

def restart():
    print "\nRestarting ZDStack"
    stop()
    print "Waiting for ZDStack to shut down"
    time.sleep(5)
    start()

actions = ('start', 'stop', 'restart', 'debug', 'reload-config')
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], 'c:', [])
except getopt.GetoptError, ge:
    print >> sys.stderr, "Error: %s" % (ge)
    print_usage()
if len(args) != 1 or args[0] not in actions:
    print >> sys.stderr, "Error: %s" % \
            ("Invalid number of arguments, or invalid action specified")
    print_usage()
opts = dict(opts)
action = args[0]
if not '-c' in opts:
    config_file = None
if '-c' in opts:
    print "Setting configuration file to %s" % (config_file)
    set_configfile(opts['-c'])
if action == 'debug':
    set_debugging(True)
    start(debug=True)
elif action == 'start':
    start()
elif action == 'stop':
    stop()
elif action == 'restart':
    restart()
elif action == 'reload-config':
    cp = get_configparser() # implicitly loads the configuration file as well
    username = cp.get('DEFAULT', 'zdstack_username')
    password = cp.get('DEFAULT', 'zdstack_password')
    get_server_proxy().reload_config(username, password)

