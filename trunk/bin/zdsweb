#!/usr/bin/python

import os
import cgi
# import cgitb; cgitb.enable()
import sys
import getopt
import signal
import socket
import urllib
import logging
import operator
import tempfile
import urlparse

import ConfigParser

from BaseHTTPServer import HTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler

from pyfileutils import write_file

from ZDStack import set_configfile, load_configparser, get_configparser, \
                    get_server_proxy
from ZDStack.Utils import html_escape

###
# Change this to the full path of the alternate configuration file you wish
# to use.  For example:
#
#   CGI_CONFIGFILE = '/home/zdstack/.supersecretzdstackrc'
#
###

CGI_CONFIGFILE = None

###
# That's it, don't change anything else!
###

MAX_NAME_LENGTH = 35
MAX_MAP_NAME_LENGTH = 25

def __print_usage(msg=None):
    if msg:
        print >> sys.stderr, "\nError: %s" % (msg)
    print >> sys.stderr, """
zdsweb

zdsweb can be used 2 different ways:

  It can be used as a standalone webserver.  As a daemon, it needs some values
    set.  This can be done here on the command-line, or in the ZDStack
    configuration file (in the DEFAULT section).  The method for employing
    either method follows:

      - address:     -a [ address ]     | 'zdsweb_hostname = <address>'
      - port:        -p [ port ]        | 'zdsweb_port = <port>'
      - log folder:  -l [ log_folder ]  | 'zdsweb_log_folder = <folderpath>'
      - PID file:    -i [ pid_file ]    | 'zdsweb_pidfile = <filepath>'
      - config file: -c [ config_file ] | n/a

  If options are defined in the ZDStack configuration file, they can be over-
    ridden here on the command-line (command-line options take precedence).
    Log folder defaults to the system's temporary folder, and PID file defaults
    to 'zdsweb.pid' in the system's temporary folder.

  It can also be used as a CGI script.  To use a custom configuration file,
    you must specify its location within this file itself.  To do so, edit this
    file and change the following line in this file as instructed (instructions
    are in the file):

      CGI_CONFIGFILE = None

zdsweb determines whether or not its being run as a CGI script by checking for
the 'GATEWAY_INTERFACE' environment variable.  This is set automatically by
webservers, so this will only cause problems if you also have this variable
defined in your environment.
    
"""
    sys.exit(-1)

try:
    __opts, __args = getopt.gnu_getopt(sys.argv[1:], 'c:a:p:l:i:', [])
except getopt.GetoptError, ge:
    __print_usage(ge)
__opts = dict(__opts)
if CGI_CONFIGFILE:
    set_configfile(CGI_CONFIGFILE)
elif '-c' in __opts:
    set_configfile(__opts['-c'])
load_configparser()

CP = get_configparser()
RCP = get_configparser(raw=True)

###
# Dumbness follows
###

__x = [('-a', 'zdsweb_hostname', 'localhost'),
       ('-l', 'zdsweb_logfolder', tempfile.gettempdir()),
       ('-i', 'zdsweb_pidfile', os.path.join(tempfile.gettempdir(),
                                             'ZDSWeb.pid'))]

def __get_vals(index):
    x = __x[index]
    return __opts.get(x[0], CP.get('DEFAULT', x[1], x[2]))

ADDRESS = __get_vals(0)
PORT = int(__opts.get('-p', 0) or CP.get('DEFAULT', 'zdsweb_port', '80'))
LOG_FOLDER = __get_vals(1)
PID_FILE = __get_vals(2)

###
# End dumbness
###

USERNAME = CP.get('DEFAULT', 'zdstack_username')
PASSWORD = CP.get('DEFAULT', 'zdstack_password')
ZDS_HOSTNAME = CP.get('DEFAULT', 'zdstack_rpc_hostname')
SCRIPT_NAME = os.environ.get('SCRIPT_NAME', '/')

def __fork():
    if hasattr(os, 'devnull'):
        devnull = os.devnull
    else:
        devnull = '/dev/null'
    stdin = stdout = stderr = devnull
    if os.fork():
        os._exit(0)
    os.chdir('/')
    os.umask(0)
    os.setsid()
    if os.fork():
        os._exit(0)
    sys.stdout.flush()
    sys.stderr.flush()
    sys.stdin = open(devnull, 'r')
    sys.stdout = open(devnull, 'a+')
    sys.stderr = open(devnull, 'a+')

def _parse_list( x):
    return [y.strip() for y in x.split(',')]

def _items_to_section(name, items):
    """Converts a list of items into a ConfigParser section.

    name:  a string representing the name of the section to
           generate.
    items: a list of option, value pairs (strings).

    """
    new_items = []
    for option, value in items:
        if not option.startswith('zdstack') and \
           not option.startswith('zdsweb') and \
           not option.startswith('ctf') and \
           not option.startswith('ffa') and \
           not option.startswith('teamdm') and \
           not option.startswith('coop') and \
           not option.startswith('duel') and \
           option != 'root_folder':
            new_items.append((option, value))
    new_items.sort()
    return '[%s]\n' % (name) + '\n'.join(["%s: %s" % x for x in new_items])

class ZDSInterface:

    proxy = get_server_proxy()

    def _get_zserv_info(self, zserv_name):
        return self.proxy.get_zserv_info(zserv_name)

    def _get_all_zserv_info(self):
        return self.proxy.get_all_zserv_info()

    def _get_zserv_dict(self, zserv_info):
        # zserv_info['name'] = zserv_info['name
        zserv_name = zserv_info['name']
        zserv_info['html_name'] = html_escape(zserv_name)
        if len(zserv_info['html_name']) > MAX_NAME_LENGTH:
            zserv_info['html_name'] = \
                            zserv_info['html_name'][:MAX_NAME_LENGTH] + '...'
        if len(zserv_info['map_name']) > MAX_MAP_NAME_LENGTH:
            zserv_info['map_name'] = \
                        zserv_info['map_name'][:MAX_MAP_NAME_LENGTH] + '...'
        zserv_info['map_number'] = str(zserv_info['map_number']).zfill(2)
        optional_wads = _parse_list(CP.get(zserv_name, 'optional_wads'))
        wads = list()
        stuff = sorted(zserv_info['wads'])
        for wad in stuff:
            if wad not in zserv_info['optional_wads']:
                wads.append(wad)
        for wad in stuff:
            if wad in zserv_info['optional_wads']:
                wads.append(wad.join(['[', ']']))
        zserv_info['wads'] = ', '.join(wads)
        return zserv_info

    def _get_all_zserv_dicts(self):
        out = [self._get_zserv_dict(x) for x in self._get_all_zserv_info()]
        out.sort(key=operator.itemgetter('port'))
        return out

    def start_zserv(self, zserv_name):
        return self.proxy.start_zserv(USERNAME, PASSWORD, zserv_name)

    def stop_zserv(self, zserv_name):
        return self.proxy.stop_zserv(USERNAME, PASSWORD, zserv_name)

    def restart_zserv(self, zserv_name):
        return self.proxy.restart_zserv(USERNAME, PASSWORD, zserv_name)

    def start_all_zservs(self):
        return self.proxy.start_all_zservs(USERNAME, PASSWORD)

    def stop_all_zservs(self):
        return self.proxy.stop_all_zservs(USERNAME, PASSWORD)

    def restart_all_zservs(self):
        return self.proxy.restart_all_zservs(USERNAME, PASSWORD)

    def get_zserv_names(self):
        return self.proxy.list_zserv_names()

    def get_zserv(self, zserv_name):
        zserv_info = self._get_zserv_info(zserv_name)
        return self._get_zserv_dict(zserv_info)

    def get_all_zservs(self):
        return self._get_all_zserv_dicts()

    def get_running_zservs(self):
        return [x for x in self.get_all_zservs() if x['is_running']]

    def get_stopped_zservs(self):
        return [x for x in self.get_all_zservs() if not x['is_running']]

    def get_zserv_config(self, zserv_name):
        return self.proxy.get_zserv_config(USERNAME, PASSWORD, zserv_name)

    def set_zserv_config(self, zserv_name, d):
        return self.proxy.set_zserv_config(USERNAME, PASSWORD, zserv_name, d)

IFACE = ZDSInterface()

HEAD_TEMPLATE = """\
<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>ZDStack Web Interface</title>
    <style type="text/css">
        body {
            font-family: sans-serif;
            color: white;
            background-color: black;
            font-size: .75em;
            max-width: 1000px;
            padding-left: 10px;
            padding-right: 10px;
        }
        a { color: white; }
        a:visited { color: white; }
        a img { border: 0; }
        .centered { text-align: center; }
        .left { text-align: left; }
        .right { text-align: right; }
        .indented { margin-left: 1em; }
        .black { color: black; }
        .white { color: white; }
        .bold { font-weight: bold; }
        ul.unstyled { list-style-type: none; }
        .nolinebreak { white-space: nowrap; }
        thead { margin-top:1em; }
        tbody { margin-bottom: 1em; }
        tr.greybg, td.greybg { background-color: #353535; }
        tr.blackbg, td.blackbg { background-color: black; }
        button {
            font-size: .8em;
            background-color: black;
            color: white;
            border: 1px solid white;
            padding: 0px;
            padding-left: 2px;
            padding-right: 2px;
        }
        a#top, a#top:visited {
            text-decoration: none;
            color: white;
        }
        a#top:hover {
            text-decoration: underline;
        }
        div#error {
            background-color: red;
            font-weight: bold;
            margin-top: 0px;
            margin-bottom: 10px;
            padding-left: 2px;
            padding-top: 2px;
            padding-bottom: 2px;
        }
        span.error {
            height: 100%;
            vertical-align: middle;
        }
        table {
            border-spacing: .25em 0em;
            border-collapse: collapse;
            width: 100%;
            left: auto;
            right: auto;
        }
        td,th {
            padding-left: .5em;
            padding-right: .5em;
            padding-bottom: .25em;
            max-width: 20em;
        }
        th { white-space: nowrap; }
        table#servers { border-spacing: 1em 0em; }
        td.serveroption {
            font-weight: bold;
            white-space: nowrap;
            /* text-align: right; */
        }
        div#line {
            border: 1px solid white;
            margin-bottom: 1em;
        }
        div#content {
            margin-right: auto;
            margin-left: auto;
            padding: 11px;
            background-color: black;
            /* background-color: #292915; */
            /*
            min-height: 544px;
            width: 1020px;
            padding: .75em;
            background: transparent fixed no-repeat top center;
            opacity: 0.9;
            filter:alpha(opacity=90);
            -moz-opacity:0.9;
            */
        }
        div#config { text-align: center; }
        textarea {
            left: auto;
            right: auto;
            background-color: black;
            color: white;
        }
        button.set_config {
            font-size: 1.25em;
            font-weight: bold;
            width: 80%;
            margin: 1em;
        }
    </style>
</head>"""

###
# content
###
BODY_TEMPLATE = """\
<body>
    <div id="content">
        <h1 class="right"><a id="top" href="%s">ZDStack Web Interface</a></h1>
        <div id="line"></div>
        %%(content)s
    </div>
</body>
</html>""" % (SCRIPT_NAME)

###
# content, errors
###
ERRORS_TEMPLATE = """\
<body>
    <div id="content">
        <h1 class="right"><a id="top" href="%s">ZDStack Web Interface</a></h1>
        <div id="line"></div>
        <div id="error">%%(errors)s</div>
        <div id="line"></div>
        %%(content)s
    </div>
</body>
</html>""" % (SCRIPT_NAME)

ERROR_TEMPLATE = '<span class="error">%s</span>'

###
# name, config
###
CONFIG_TEMPLATE = """\
<br/>
<div id="line"></div>
<div id="config">
    <h2 class="right">Configure %%(html_name)s</h2>
    <form action="%s" method="POST"
          enctype="application/x-www-form-urlencoded">
        <input type="hidden" name="name" value="%%(name)s"/>
        <textarea name="config" rows="%%(height)s"
                  cols="145">%%(config)s</textarea>
        <br/>
        <button class="control set_config" name="action"
                value="set_config" type="submit">Set Config</button>
    </form>
</div>
<div id="line"></div>
""" % (SCRIPT_NAME)

###
# servers
###
SERVERS_TEMPLATE = """\
        <table id="servers">
            <thead>
                <tr>
                    <th class="centered">Server Name</th>
                    <th class="centered">Players</th>
                    <th class="centered">Type</th>
                    <th class="centered">PWADs</th>
                    <th class="centered">Current Map</th>
                    <th class="centered">Port</th>
                    <th class="centered">Controls</th>
                </tr>
            </thead>
            <tbody>
            %(servers)s
            </tbody>
        </table>"""

###
# action, cap_action
###
CONTROL_TEMPLATE = """\
                             <button class="control" type="submit" name="action" value="%(action)s">%(cap_action)s</button>"""

###
# name, players, max_players, mode, wads, map_name, map_number, port
###
SERVER_TEMPLATE = """    <tr>
                    <td class="nolinebreak left">
                        <a href="zds://%s:%%(port)s">%%(html_name)s</a>
                    </td>
                    <td class="centered">%%(players)s / %%(max_players)s</td>
                    <td class="centered">%%(mode)s</td>
                    <td class="left">%%(wads)s</td>
                    <td class="nolinebreak left">%%(map_name)s :: MAP%%(map_number)s</td>
                    <td class="centered">%%(port)s</td>
                    <td class="centered">
                        <form action="%s" method="POST"
                              enctype="application/x-www-form-urlencoded">
                            <input type="hidden" name="name" value="%%(name)s"/>
%%(controls)s
                        </form>
                    </td>
                </tr>""" % (ZDS_HOSTNAME, SCRIPT_NAME)

###
# name, players, max_players, mode, wads, map_name, map_number, port
###
SERVER_TEMPLATE = """    <tr class="%%(color)sbg">
                    <td class="nolinebreak left %%(color)sbg">
                        <a href="zds://%s:%%(port)s">%%(html_name)s</a>
                    </td>
                    <td class="centered %%(color)sbg">%%(players)s / %%(max_players)s</td>
                    <td class="centered %%(color)sbg">%%(mode)s</td>
                    <td class="left %%(color)sbg">%%(wads)s</td>
                    <td class="nolinebreak left %%(color)sbg">%%(map_name)s :: MAP%%(map_number)s</td>
                    <td class="centered %%(color)sbg">%%(port)s</td>
                    <td class="centered %%(color)sbg">
                        <form name="%%(name)s" action="%s" method="POST"
                              enctype="application/x-www-form-urlencoded">
                            <input type="hidden" name="name" value="%%(name)s"/>
%%(controls)s
                        </form>
                    </td>
                </tr>""" % (ZDS_HOSTNAME, SCRIPT_NAME)

###
# name, players, max_players, mode, wads, map_name, map_number, port
###
STOPPED_SERVER_TEMPLATE = """    <tr class="%%(color)sbg">
                    <td class="nolinebreak left %%(color)sbg">%%(html_name)s</td>
                    <td class="centered %%(color)sbg">- / %%(max_players)s</td>
                    <td class="centered %%(color)sbg">%%(mode)s</td>
                    <td class="left %%(color)sbg">%%(wads)s</td>
                    <td class="nolinebreak centered %%(color)sbg">::</td>
                    <td class="centered %%(color)sbg">%%(port)s</td>
                    <td class="centered %%(color)sbg">
                        <form name="%%(name)s" action="%s" method="POST"
                              enctype="application/x-www-form-urlencoded">
                            <input type="hidden" name="name" value="%%(name)s"/>
%%(controls)s
                        </form>
                    </td>
                </tr>""" % (SCRIPT_NAME)

NO_SERVERS_TEMPLATE = '<div class="centered">No Servers Configured</div>'

def _get_cap_action(action):
    tokens = action.replace('_', ' ').split(' ')
    return ' '.join([x.capitalize() for x in tokens])

def _add_control(controls, action, name):
    d = {'action': action, 'url_name': urllib.quote(name),
         'cap_action': _get_cap_action(action)}
    controls.append(CONTROL_TEMPLATE % d)
    return controls

def _add_controls(zserv_dict):
    ###
    # get config
    # set config
    # start
    # stop
    # restart
    ###
    controls = list()
    # _add_control(controls, 'set_config', zserv_dict['name'])
    if zserv_dict['is_running']:
        _add_control(controls, 'stop', zserv_dict['name'])
        _add_control(controls, 'restart', zserv_dict['name'])
    else:
        _add_control(controls, 'start', zserv_dict['name'])
    _add_control(controls, 'get_config', zserv_dict['name'])
    zserv_dict['controls'] = '\n'.join(controls)
    return zserv_dict

class DebugPage:

    def _to_str(self, d):
        content = ''
        for x, y in d.items():
            s = html_escape("%s: %s" % (x, y))
            if 'TEMPLATE' not in s and \
               'function' not in s and \
               'module' not in s:
                content += s + "<br/>"
        return content

    def render(self, d):
        d = {'content': self._to_str(d)}
        return HEAD_TEMPLATE + BODY_TEMPLATE % d

class Page:

    ###
    # A couple things:
    #   - Do we want an AJAX-style get_config thing?  I think... no?
    ###

    actions = {'start': IFACE.start_zserv,
               'stop': IFACE.stop_zserv,
               'restart': IFACE.restart_zserv,
               'start_all': IFACE.start_all_zservs,
               'stop_all': IFACE.stop_all_zservs,
               'restart_all': IFACE.restart_all_zservs,
               'get_config': IFACE.get_zserv_config,
               'set_config': IFACE.set_zserv_config}

    requires_name = ('start', 'stop', 'restart', 'get_config', 'set_config')

    def __init__(self, action=None, name=None, config=None):
        self.action = action
        self.name = name
        if not action:
            self._func = None
        elif action in self.requires_name:
            if not name:
                raise ValueError("Action %s requires a ZServ name" % (action))
            if action == 'set_config':
                if not config:
                    raise ValueError("'set_config' requires config data")
                self._func = lambda: self.actions[action](name, config)
            else:
                self._func = lambda: self.actions[action](name)
        else:
            if name:
                es = "Action %s does not act on a single ZServ"
                raise ValueError(es % (action))
            self._func = lambda: self.actions[action]()

    def render(self):
        errors = []
        all_zservs = []
        servers = []
        content = ''
        bottom_content = ''
        es = 'Could not connect to ZDStack: %s'
        try:
            if self._func:
                if self.action == 'get_config':
                    config = self._func()
                    d = {'name': self.name, 'config': config,
                         'html_name': html_escape(self.name),
                         'height': config.count('\n') + 1}
                    if len(d['html_name']) > 35:
                        d['html_name'] = d['html_name'][:35] + '...'
                    bottom_content += CONFIG_TEMPLATE % d
                else:
                    self._func()
        except socket.error:
            try:
                error = es % (IFACE.proxy._XMLProxy__host)
            except AttributeError:
                error = es % (IFACE.proxy._JSONProxy__host)
            d = {'content': content, 'errors': ERROR_TEMPLATE % (error)}
            return HEAD_TEMPLATE + ERRORS_TEMPLATE % d
        except Exception, e:
            import traceback
            raise Exception(traceback.format_exc()) # for debugging
            errors.append(str(e))
        try:
            all_zservs = IFACE.get_all_zservs()
        except socket.error:
            # error = 'Could not connect to ZDStack'
            try:
                error = es % (IFACE.proxy._XMLProxy__host)
            except AttributeError:
                error = es % (IFACE.proxy._JSONProxy__host)
            d = {'content': content, 'errors': ERROR_TEMPLATE % (error)}
            return HEAD_TEMPLATE + ERRORS_TEMPLATE % d
        except Exception, e:
            import traceback
            raise Exception(traceback.format_exc()) # for debugging
            errors.append(str(e))
        if all_zservs:
            current_color = 'grey'
            for zserv_dict in all_zservs:
                if zserv_dict['is_running']:
                    server_template = SERVER_TEMPLATE
                else:
                    server_template = STOPPED_SERVER_TEMPLATE
                zserv_dict['color'] = current_color
                current_color = current_color is 'grey' and 'black' or 'grey'
                servers.append(server_template % _add_controls(zserv_dict))
            content += SERVERS_TEMPLATE % {'servers': '\n'.join(servers)}
        else:
            content += NO_SERVERS_TEMPLATE
        if bottom_content:
            content += bottom_content
        if errors:
            errors = [html_escape(error) for error in errors]
            errors = ' | '.join([ERROR_TEMPLATE % (error) for error in errors])
            template = ERRORS_TEMPLATE
            d = {'content': content, 'errors': errors}
        else:
            errors = ''
            template = BODY_TEMPLATE
            d = {'content': content}
        return HEAD_TEMPLATE + template % d

    def render_cgi(self):
        s = "Content-Type: text/html\r\nContent-Length: %d\n\n%s\r\n"
        page = self.render()
        return s % (len(page), page)

    def __call__(self):
        return self.render()

def _get_page(query_dict=None):
    action = name = config = None
    query_dict = query_dict or dict()
    if 'action' in query_dict:
        if len(query_dict['action']) > 1:
            es = "A maximum of 1 action per request is allowed"
            raise Exception(es)
        action = query_dict['action'][0]
        if 'name' in query_dict:
            if len(query_dict['name']) > 1:
                es = "A maximum of 1 name per request is allowed"
                raise Exception(es)
            name = query_dict['name'][0]
        if 'config' in query_dict:
            if len(query_dict['name']) > 1:
                es = "A maximum of 1 set of config data per request "
                es += "is allowed"
                raise Exception(es)
            config = query_dict['config'][0]
    elif 'name' in query_dict:
        raise Exception("Names require actions")
    return Page(action=action, name=name, config=config)

class ZDSHTTPRequestHandler(SimpleHTTPRequestHandler):

    def send_head(self, post=False):
        query_dict = None
        # query = urlparse.urlparse(self.path).query
        if not post and urlparse.urlparse(self.path).query:
            es = "Can only send query params when POSTing"
            return self.send_error(501, es)
        if post:
            post_length = int(self.headers['Content-Length'])
            query = self.rfile.read(post_length)
            query_dict = cgi.parse_qs(query)
        try:
            page = _get_page(query_dict)
        except Exception, e:
            return self.send_error(400, str(e))
        try:
            content = page.render()
        except Exception, e:
            return self.send_error(500, str(e))
        self.send_response(200)
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', str(len(content)))
        self.end_headers()
        return content

    def do_HEAD(self):
        self.send_head()

    def do_GET(self):
        content = self.send_head()
        if content:
            self.wfile.write(content)

    def do_POST(self):
        try:
            content = self.send_head(post=True)
            if content:
                self.wfile.write(content)
        except Exception, e:
            self.send_error(500, str(e))

    def log_error(self, format, *args):
        logging.getLogger('zdsweb').error(format % args)

    def log_message(self, format, *args):
        logging.getLogger('zdsweb').info(format % args)

def _print_cgi_response(s):
    print "Content-Type: text/plain\r"
    print "Content-Length: %d\r" % (len(s))
    print "\r\n%s\r\n" % (s)
    sys.exit(0)

def run_cgi():
    action = None
    name = None
    form = cgi.FieldStorage()
    query_dict = dict()
    for x in form:
        query_dict[x] = form.getlist(x)
    post = os.environ.get('REQUEST_METHOD', 'GET') == 'POST'
    if not post and len(query_dict.keys()):
        es = "Can only send query params when POSTing"
        raise Exception(es)
    print _get_page(query_dict).render_cgi()

def run_httpd():
    if os.path.isfile(PID_FILE):
        print >> sys.stderr, "ZDSWeb is already running: %s\n" % (PID_FILE)
    __log_file = os.path.join(LOG_FOLDER, 'ZDSWeb.log')
    __log_format = '[%(asctime)s]%(message)s'
    __formatter = logging.Formatter(__log_format, '%Y-%m-%d %H:%M:%S')
    __handler = logging.handlers.TimedRotatingFileHandler(__log_file,
                                                          when='midnight',
                                                          backupCount=4)
    __handler.setFormatter(__formatter)
    logging.getLogger('zdsweb').addHandler(__handler)
    logging.getLogger('zdsweb').setLevel(logging.INFO)
    server_address = (ADDRESS, PORT)
    print "ZDSWeb starting up on %s:%s" % server_address
    __fork()
    write_file(str(os.getpid()), PID_FILE, overwrite=True)
    logging.info("ZDSWeb starting up on %s:%s" % server_address)
    HTTPServer(server_address, ZDSHTTPRequestHandler).serve_forever()

if __name__ == "__main__":
    if 'GATEWAY_INTERFACE' in os.environ:
        ###
        # Only CGI should have GATEWAY_INTERFACE defined in their environment.
        ###
        run_cgi()
    else:
        run_httpd()

