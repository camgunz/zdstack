;;;
; Introduction
;
; This is the example ZDStack configuration file. Previously, documentation
; on configuration ZDStack was mostly limited to the ZDStack Wiki and this
; file itself, neither of which was comprehensive... to say the least. I
; have added quite a bit of (hopefully) clear and verbose documentation here
; in hopes of aiding administrators in their quest to master configuring
; multiple ZDaemon servers. Advanced users can feel free to remove all of
; this (in Vim, pressing '}' takes you to the end of the documentation, which
; I find quite handy) if they find it's slowing them down. Note that all
; comments are removed if the configuration is modified via ZDStack's RPC
; interface.
;
; Location
;
; This is the example ZDStack configuration file. ZDStack will look for this
; file in the following locations (in this order):
; - ./zdstackrc
; - ./zdstack.ini
; - ~/.zdstackrc
; - ~/.zdstack.ini
; - /etc/zdstackrc
; - /etc/zdstack.ini
; - /etc/zdstack/zdstackrc
; - /etc/zdstack/zdstack.ini
;
; For system-wide installations (not recommended), the preferred location is
; /etc/zdstack/zdstackrc. For user-local installations, the preferred
; location is ~/.zdstackrc
;
; There are two types of options in this configuration file, value options
; and boolean options. Value options are specific values, such as '8080' and
; 'xml-rpc'. In instances where only certain values are valid (for example,
; 'zdstack_rpc_protocol'), the values are case-insensitive. Boolean options
; are either 'true' or 'false', and can be specified many different ways:
; - on/off
; - yes/no or y/n
; - true/false or t/f
; - others, but this should be enough!
;
; Variable Substitution
;
; This configuration file supports a simple, yet powerful form of variable
; substitution. You can define arbitrary values here, for example:
;
; idl_motd = "Welcome to the International Doom League"
;
; And use this value later, either in the DEFAULT section or a server
; section:
;
; [International Doom League Week 4 - ZDCTF08 - A]
; motd = %(idl_motd)s - Week 4 - ZDCTF08 - Server A
;
; The MOTD for that server then will be:
;
; Welcome to the International Doom League - Week 4 - ZDCTF08 - Server A
;
; You can see this in use in this example configuration file; 'root_folder'
; is not used internally in ZDStack, but rather it's defined here as a
; convenience so that ZDStack's resources are all contained beneath one
; folder. Some users may not want to do this, however, so the use of
; 'root_folder' is entirely optional.
;
; Variables cannot refer to themselves, however, so you cannot do this:
;
; [DEFAULT]
; motd = Server managed by ZDStack
;
; [International Doom League Week 4 - ZDCTF08 - A]
; motd = Welcome to the International Doom League<br><br>%(motd)s
;
; In order to accomplish the same thing, you should define some arbitrary
; options:
;
; [DEFAULT]
; motd = This is the lame default MOTD
; zds_motd = Server managed by ZDStack
; idl_motd = Welcome to the International Doom League
;
; [International Doom League Week 4 - ZDCTF08 - A]
; motd = %(idl_motd)s - Week 4 - ZDCTF08 - A<br><br>%(zds_motd)s
;
; The MOTD for that server will then be:
;
; Welcome to the International Doom League - Week 4 - ZDCTF08 - A
; Server managed by ZDStack
;
; Game Mode Defaults
;
; This configuration file will also detect 'game mode specific' defaults. By
; prefixing an option in the DEFAULT section with the game mode, all servers
; with that game mode will have that option as their default, instead of the
; regular default option. For example:
;
; dmflags = 201796
; ctf_dmflags = 21508
;
; The DMFLAGS for any CTF server will then be 21508, instead of the default
; 201796 (not that we recommend setting default DMFLAGS).
;
; Even though a user could accomplish nearly the same thing using variable
; substitution, this saves unnecessary repetition in the server sections,
; which helps to keep the configuration manageable.
;
; Sections
;
; A section is defined using brackets, i.e. [ZDDL Duel Server - MAP01]. The
; only special section is the DEFAULT section, which defines defaults for all
; other sections. An option/value pair defined in the DEFAULT section is
; defined for all sections, but an option/value pair defined in any other
; section is defined only for that section, for example:
;
; [DEFAULT]
; motd = Server managed by ZDStack
; idl_motd = Welcome to the International Doom League
; zddl_motd = Welcome to the ZDaemon Duel League
;
; [ZDDL Duel Server - MAP01]
; motd = %(zddl_motd)s - DoomII MAP01
;
; [International Doom League Week 4 - ZDCTF08 - A]
; motd = %(idl_motd)s - Week 4 - ZDCTF08 - Server A
;
; Server sections, such as [ZDDL Duel Server - MAP01], use their section name
; as their internal ZDStack name. For instance, when you are using RPC
; methods and need to refer to a server by its name, you use the name of its
; configuration section ('ZDDL Duel Server - MAP01'). This name will not
; appear in any launchers, it is strictly ZDStack only. ZDStack will also use
; this name to create the folder in which the zserv process will run (and
; generate logs, if configured to do so).  Thus it is best to keep section
; names short and special-character/space free.  Not because ZDStack requires
; this, but mainly for easy of typing.  To use the section name in variable
; substitution, simply use %(__name__)s.
;
; The individual server's 'hostname' is displayed in launchers, and can be
; set to anything the user likes. ZDStack does not use a server's hostname,
; but plugins may.
;
; Required Options
;
; Not all options are required, even options that are seemingly necessary
; for ZDStack to function (such as database_engine) have reasonable defaults
; should they not be defined in the configuration. That said, ZDStack
; requires the following options to be defined globally (in the DEFAULT
; section):
;
; - zdstack_username
; - zdstack_password
; - zdstack_port
; - zdstack_rpc_protocol
; - zdstack_log_folder
; - zdstack_pid_file
; - zdstack_zserv_folder
; - zdstack_plugin_folder
; - zdstack_iwad_folder
; - zdstack_wad_folder
; - zdstack_master_banlist_folder
; - zdstack_banlist_file
; - zdstack_whitelist_file
;
; Additionally, the following options must be defined in each server section
; (you can avoid defining these for every server by simply definining them in
; the DEFAULT section, as you will see from the examples below):
;
; - zserv_exe
; - iwad
; - mode
; - port
; - hostname
; - admin_email
; - website
; - motd
; - advertise
; - skill
; - enable_events
; - enable_stats
; - enable_plugins
;
; Global Options vs. Server Options
;
; Options prefixed with a 'zdstack_' are global ZDStack options. Otherwise
; the option can be set both globally in the DEFAULT section, or distinctly
; in that server's section. This allows users to specify zserv binaries,
; IWADs, etc.
;
; Paths
;
; All paths are resolved with regard to '~' expansion and absoluteness. For
; example, given the paths:
;
; iwad_folder = var/zdstack
; wad_folder = ~/wads
;
; ZDStack will expand 'iwad_folder' to '/var/zdstack' (because ZDStack's
; current working directory is '/') and wad_folder to
; '/home/<username>/wads' (on most systems anyway). It is usually best to
; use absolute paths when setting values, but ZDStack will handle relative
; paths and paths using '~'.
;
; All paths are checked for existence and proper access. ZDStack will give
; an error and quit if things are not in order.
;
; Registering Config Changes
;
; After making a change to the configuration file, sending SIGHUP to the
; ZDStack process will have it reprocess and reload the file... provided
; there are no errors. However, some changes require server process
; restarts, which ZDStack will not do automatically. Additionally, the
; options prefixed with 'zdstack_' require a full ZDStack restart to take
; effect. Running 'zdstack' with the 'reload-config' action ('./zdstack
; reload-config') simply sends the 'reload_config' RPC command to the running
; ZDStack process.
;
; Note: Changing the value of 'zdstack_pid_file' before stopping ZDStack
; prevents the 'zdstack' script from locating the previous PID file, which
; in turn prevents it from finding the PID and sending the appropriate
; signals to the running ZDStack process. So avoid changing this value until
; after stopping ZDStack.
;
; Databasing
;
; ZDStack version 0.11 removed the dependency on PyXSE and added a
; dependency on SQLAlchemy because stores all of its data in a relational
; database. Even if you have disabled stats, SQLAlchemy must still be
; installed as ZDStack stores almost all of its per-round state information
; in an in-memory SQLite database, which allows most plugins to continue to
; function properly. At the end of each round the in-memory database is
; cleared.
;
; One of the benefits of using SQLAlchemy is that it allows for the use of
; many relational database backends. SQLite is the default, and if no
; database engine is defined it used as the default. ZDStack requires Python
; 2.5 or higher, all of which come with built-in support for SQLite.
; SQLite cannot be used reliably on a remote machine however, so if you
; intend to host your stats database on a different machine, you will need to
; choose a network-accessible relational database, such as PostgreSQL or
; MySQL (or even Oracle and MS-SQL!).
;
; For the most common case (1 machine, using SQLite, stats enabled) it is
; important to remember to define a database location. Otherwise ZDStack
; will use an in-memory database that will not only grow in size (and RAM
; usage) as time goes on, but will be destroyed when ZDStack exits. If stats
; are disabled, the in-memory database will only hold data for 1 round for
; each running zserv; at the end of every round the data from that round is
; cleared.
;
; Addresses & Hostnames
;
; If explicit hostnames or addresses are not given, ZDStack tries to
; ascertain them without being too liberal. Because machines can have many
; public-facing interfaces, and these interfaces can in turn be mapped to
; many different FQDNs (Fully-Qualified Domain Name), the process is not
; simple and further is not 100% accurate. The best strategy is to use
; either an IP address or an FQDN throughout this configuration file. If
; this is impossible or undesirable, ZDStack will try and default to loopback
; addresses for its RPC interface. The zserv binary itself has its own logic
; for determining the public address of its host machine, and it can be
; explicitly set here using the 'ip' option.
;
; Limits on advertised servers
;
; As of this writing, it is known that the ZDaemon administration arbitrarily
; limits the amount of advertised zserv binaries a single IP address can run
; to around 20, which it can adjust if requested. If your advertised servers
; are not appearing in launchers and you are advertising > 20 servers, please
; check with the ZDaemon administration first to make sure you haven't
; triggered the "Too Many ZServs/IP" automatic ban.
;
; Limits on some values
;
; As of this writing, it is known that the ZDaemon administration arbitrarily
; limits the values of some of zserv's configuration options when advertising
; is enabled. There is no list of such options, but spam_limit and
; are known to be in this category.
;
; Finally
;
; The end! Go have some fun!
;;;

[DEFAULT]

;;;
; ZDStack's admin username
; Type: string
;;;
zdstack_username = admin

;;;
; ZDStack's admin password
; Type: string
;;;
zdstack_password = pacman2000

;;;
; The port that ZDStack should listen on
; Type: integer
;;;
zdstack_port = 8888

;;;
; The rpc protocol to use, json-rpc is recommended
; Type: string (either xml-rpc or json-rpc)
;;;
zdstack_rpc_protocol = json-rpc

;;;
; The address of the host on which to listen for RPC requests.
; If not given or invalid, ZDStack will attempt to discover the machine's
; loopback address itself, so only local access will be possible... which
; may be undesirable. This applies to the value 'localhost' as well. Some
; alternatives are listed & commented-out below.
;
; Note: If you have trouble with host auto-detection, you may have to make some
; changes/additions to your /etc/hosts file.
; Type: string
;;;
;zdstack_rpc_hostname = 127.0.0.1
;zdstack_rpc_hostname = 216.34.181.45
;zdstack_rpc_hostname = slashdot.org
zdstack_rpc_hostname = localhost

;;;
; A convenience option/value defined so that other locations may be defined
; relative to it.
;;;
root_folder = ~/ZDStack

;;;
; The full path to a folder that will contain logs for ZDStack and all zservs
; Type: path
;;;
zdstack_log_folder = %(root_folder)s/log

;;;
; The full path to a file that ZDStack will use as its pid file (file
; containing ZDStack's process id)
; Type: path
;;;
zdstack_pid_file = %(root_folder)s/ZDStack.pid

;;;
; Location of the individual zserv folders
; Type: path
;;;
zdstack_zserv_folder = %(root_folder)s/servers

;;;
; The database engine to use
; Type: string, either sqlite, postgresql, mysql, oracle, mssql or firebird
;;;
zdstack_database_engine = sqlite

;;;
; The name of the database to connect to. There are a few caveats for SQLite:
;   - This should be the full path to a file to be used as a database.
;   - You can use :memory: to use an in-memory database, but this will be
;     destroyed when ZDStack exits and will increase in size (and obviously
;     memory usage) until then. If stats are disabled, however, the in-memory
;     database will not increase in size as time goes on.
;   - Leaving this blank or not defining this option causes ZDStack to use an
;     in-memory database by default.
;;;
zdstack_database_name = %(root_folder)s/zdsdbfile.db

;;;
; The address of the database host to connect to.  Don't use this when using
; SQLite.
; Type: string
;;;
zdstack_database_host = localhost

;;;
; The username to use when connecting to the database
; Type: string
;;;
zdstack_database_username = zdstack

;;;
; The password to use when connecting to the database
; Type: string
;;;
zdstack_database_password = zdstackrox

;;;
; The full path to a folder containing plugins available to ZDStack
; Type: path
;;;
zdstack_plugin_folder = %(root_folder)s/plugins

;;;
; Full path to a file where ZDStack will save ZDaemon's banlist, if it doesn't
; exist it will be created
; Type: path
;;;
zdstack_master_banlist_file = %(root_folder)s/zdaemon_bans.txt

;;;
; Full path to a ZDStack banlist file, if it doesn't exist it will be created
; Type: path
;;;
zdstack_banlist_file = %(root_folder)s/banlist.ini

;;;
; Full path to a ZDStack whitelist file, if it doesn't exist it will be created
; Type: path
;;;
zdstack_whitelist_file = %(root_folder)s/whitelist.ini

;;;
; Full path to a folder containing the wads available to ZDStack
; Type: path
;;;
zdstack_wad_folder = %(root_folder)s/WADs

;;;
; Full path to a folder containing the iwads available to ZDStack
; Type: path
;;;
zdstack_iwad_folder = %(root_folder)s/IWADs


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                          ;; 
;;  This is an example server section, containing all the possible options  ;; 
;;                                                                          ;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[server_one]

;;;
; Adds the number of the map to the end of the hostname
; Type: boolean
;;;
add_mapnum_to_hostname = no

;;;
; Adds explosions to rockets when they collide with something
; Type: boolean
;;;
add_rocket_explosion = yes

;;;
; The e-mail address displayed in ide/ZDaemon launcher
; Type: string
;;;
admin_email = admin@zdstack.com

;;;
; Whether or not to advertise the server on the ZDaemon master
; Type: boolean
;;;
advertise = yes

;;;
; How much players can move while in the air
; Type: float
;;;
air_control = 0

;;;
; Whether or not to display the names of other players when in the client's view
; Type: boolean
;;;
allow_target_names = yes

;;;
; A list of wads that can substitute for other wads, like zvox2.wad=zvox4.wad
; Type: list (see ZDaemon documentation for details)
;;;
alternate_wads = doom2.wad=freedm062.wad=freedoom062.wad zvox2.wad=zvox4.wad

;;;
; Whether or not to copy ZDaemon's banlist, this only works if _advertise_ is
; disabled, otherwise a server must use ZDaemon's banlist
; Type: boolean
;;;
copy_zdaemon_banlist = no

;;;
; Amount of time a player can stay dead before being forced to spectate or respawn
; Type: integer
;;;
death_limit = 30

;;;
; Whether or not to enable developer mode
; Type: boolean
;;;
developer = no

;;;
; Whether or not players drop their weapons when killed
; Type: boolean
;;;
drop_weapons = no

;;;
; Whether or not to enable events
; Type: boolean
;;;
enable_events = yes

;;;
; Whether or not players experience damage from falling
; Type: boolean
;;;
falling_damage = 0

;;;
; Whether or not monsters move extra fast
; Type: boolean
;;;
fast_monsters = no

;;;
; Update player positions on every tic (as opposed to every other tic)
; Type: boolean
;;;
fineticks = yes

;;;
; Forces a player to respawn after _death_limit_ seconds
; Type: boolean
;;;
force_respawn = no

;;;
; Forces all water to be swimmable, instead of instant death
; Type: boolean
;;;
force_water = no

;;;
; Number of frags that wins a player the game
; Type: integer
;;;
frag_limit = 50

;;;
; Whether or not to manually generate the block map (used for collision detection) rather than use the one in the wad
; Type: boolean
;;;
generate_block_map = no

;;;
; How much gravity to apply, defaults to 800
; Type: integer
;;;
gravity = 800

;;;
; Size of ZDaemon's heap (memory setting)
; Type: integer
;;;
heapsize = 

;;;
; Whether or not to hide countries of players on the scoreboard
; Type: boolean
;;;
hide_countries = no

;;;
; The hostname of the server, this is displayed in ide/ZDaemon launcher
; Type: string
;;;
hostname = ZDStack Server %(__name__)s %(mode)s

;;;
; Whether or not ammo is infinite
; Type: boolean
;;;
infinite_ammo = no

;;;
; Whether or not weapon switching is instantaneous
; Type: boolean
;;;
instant_weapon_switching = no

;;;
; The ip address that the zserv should bind to
; Type: integer
;;;
ip = 

;;;
; The full path to an iwad
; Type: path
;;;
iwad = %(zdstack_iwad_folder)s/doom2.wad

;;;
; Whether or not to enable plugins, requires _events_enabled_
; Type: boolean
;;;
enable_plugins = no

;;;
; The port that the zserv should listen on
; Type: integer
;;;
port = 8888

;;;
; Whether or not players keep keys after each map
; Type: boolean
;;;
keep_keys = no

;;;
; Whether or not to spawn keys in team modes
; Type: boolean
;;;
keys_in_team_modes = no

;;;
; Whether or not keys stay after being picked up by a player
; Type: boolean
;;;
keys_stay = yes

;;;
; Number of kills that wins a player the game (cooperative game mode only)
; Type: integer
;;;
kill_limit = 200

;;;
; Logs sent packets to the console
; Type: boolean
;;;
log_sent_packets = no

;;;
; List of maps to rotate through
; Type: comma-separated list
;;;
maps = map01

;;;
; Maximum number of lost souls that can exist at any time
; Type: integer
;;;
max_lost_souls = 30

;;;
; Maximum number of clients that can be connected to the server
; Type: integer
;;;
max_clients = 16

;;;
; Maximum number of clients that can share an ip address
; Type: integer
;;;
max_clients_per_ip = 16

;;;
; Maximum number of players who can be playing at any time
; Type: integer
;;;
max_players = 16

;;;
; Maximum number of players who can be playing on a team at any time
; Type: integer
;;;
max_players_per_team = 8

;;;
; Maximum number of playing teams (number of teams is always 4, this is just the number of teams that can actually participate in the game)
; Type: integer
;;;
max_teams = 2

;;;
; Number of players below which bots are spawned to compensate
; Type: integer
;;;
min_players = 2

;;;
; Game mode of the server, either ctf, 1v1/duel, ffa, teamdm/tdm, or coop
; Type: string
;;;
mode = ctf

;;;
; Message printed to every client's screen when they first join the server
; Type: string
;;;
motd = Welcome to %(__name__)s!<br><br>This server is powered by ZDStack

;;;
; Whether or not players get double ammo when they pick up a weapon
; Type: boolean
;;;
nice_weapons = no

;;;
; Whether or not to compress network traffic
; Type: boolean
;;;
no_file_compression = no

;;;
; Whether or not to treat team starts as generic deathmatch starts
; Type: boolean
;;;
no_team_starts = no

;;;
; If enabled, does not spawn armor
; Type: boolean
;;;
no_armor = no

;;;
; If enabled, does not allow players to use a crosshair
; Type: boolean
;;;
no_crosshair = no

;;;
; If enabled, does not allow players to exit the level (kills them)
; Type: boolean
;;;
no_exit = yes

;;;
; If enabled, does not kill players when they attempt to exit the
; level - simply disables exiting
; Type: boolean
;;;
no_exit_kill = no

;;;
; If enabled, players cannot use freelook (keyboardlook/mouselook)
; Type: boolean
;;;
no_freelook = no

;;;
; If enabled, does not spawn health
; Type: boolean
;;;
no_health = no

;;;
; If enabled, does not spawn items
; Type: boolean
;;;
no_items = no

;;;
; If enabled, does not allow players to jump
; Type: boolean
;;;
no_jump = no

;;;
; If enabled, does not spawn monsters
; Type: boolean
;;;
no_monsters = yes

;;;
; If enabled, does not allow things to exist on top of other things
; (every thing is infinitely tall)
; Type: boolean
;;;
no_passover = no

;;;
; If enabled, does not spawn super items
; Type: boolean
;;;
no_super = no

;;;
; Number of ZServ logs to save
; Type: integer
;;;
number_of_zserv_logs_to_save = 9

;;;
; Whether or not to support the old ZDaemon ctf convention
; Type: boolean
;;;
old_ctf_convention = yes

;;;
; Whether or not falling damage uses the old logic
; Type: boolean
;;;
old_falling_damage = no

;;;
; Whether or not jumping physics uses the old logic
; Type: boolean
;;;
old_jump = no

;;;
; Whether or not movement physics uses the old logic
; Type: boolean
;;;
old_player_movement = no

;;;
; Whether or not ZDaemon's random number generator uses the old logic (more
; like vanilla doom, but more predictable)
; Type: boolean
;;;
old_random = no

;;;
; Whether or not ZDaemon's sound cutoff logic uses the old logic
; Type: boolean
;;;
old_sound_cutoff = no

;;;
; If enabled, wallrunning will only work 1 way
; Type: boolean
;;;
old_wallrun = no

;;;
; If enabled, forces players to switch weapons when they are picked up
; Type: boolean
;;;
old_weapon_switch = no

;;;
; If enabled, ZDaemon will use the old sound curve when playing weapon sounds
; Type: boolean
;;;
old_weapon_sounds = no

;;;
; A list of wads that will be loaded if the player has them, but
; aren't required
; Type: comma-separated list
;;;
optional_wads = zvox2.wad

;;;
; Whether or not servers will enter overtime if teams/players are tied
; when _time_limit_ is reached
; Type: boolean
;;;
overtime = no

;;;
; If enabled, monsters deal double damage
; Type: boolean
;;;
powerful_monsters = no

;;;
; If enabled, items will respawn four times slower
; Type: boolean
;;;
quad_respawn_time = no

;;;
; If enabled, map rotation will be randomized
; Type: boolean
;;;
random_maps = no

;;;
; The password used for rcon access
; Type: string
;;;
rcon_password: zdstackrcon

;;;
; Password for limited rcon level 1
; Type: string
;;;
rcon_password_1 = 

;;;
; Password for limited rcon level 2
; Type: string
;;;
rcon_password_2 = 

;;;
; Password for limited rcon level 3
; Type: string
;;;
rcon_password_3 = 

;;;
; Password for limited rcon level 4
; Type: string
;;;
rcon_password_4 = 

;;;
; Password for limited rcon level 5
; Type: string
;;;
rcon_password_5 = 

;;;
; Password for limited rcon level 6
; Type: string
;;;
rcon_password_6 = 

;;;
; Password for limited rcon level 7
; Type: string
;;;
rcon_password_7 = 

;;;
; Password for limited rcon level 8
; Type: string
;;;
rcon_password_8 = 

;;;
; Password for limited rcon level 9
; Type: string
;;;
rcon_password_9 = 

;;;
; List of enabled commands for rcon level 1
; Type: comma-separated list
;;;
rcon_commands_1 = 

;;;
; List of enabled commands for rcon level 2
; Type: comma-separated list
;;;
rcon_commands_2 = 

;;;
; List of enabled commands for rcon level 3
; Type: comma-separated list
;;;
rcon_commands_3 = 

;;;
; List of enabled commands for rcon level 4
; Type: comma-separated list
;;;
rcon_commands_4 = 

;;;
; List of enabled commands for rcon level 5
; Type: comma-separated list
;;;
rcon_commands_5 = 

;;;
; List of enabled commands for rcon level 6
; Type: comma-separated list
;;;
rcon_commands_6 = 

;;;
; List of enabled commands for rcon level 7
; Type: comma-separated list
;;;
rcon_commands_7 = 

;;;
; List of enabled commands for rcon level 8
; Type: comma-separated list
;;;
rcon_commands_8 = 

;;;
; List of enabled commands for rcon level 9
; Type: comma-separated list
;;;
rcon_commands_9 = 

;;;
; If enabled, spawns bots until number_of_bots + number_of_players == _min_players_
; Type: boolean
;;;
remove_bots_when_humans = yes

;;;
; Whether or not to resend packets that the client did not receive
; Type: boolean
;;;
resend_lost_packets = yes

;;;
; Whether or not to reset player inventories after each map
; Type: boolean
;;;
reset_inventory = no

;;;
; Whether or not barrels respawn
; Type: boolean
;;;
respawn_barrels = no

;;;
; Whether or not items respawn
; Type: boolean
;;;
respawn_items = yes

;;;
; Whether or not monsters respawn
; Type: boolean
;;;
respawn_monsters = no

;;;
; Whether or not protection items respawn
; Type: boolean
;;;
respawn_protection = yes

;;;
; Whether or not super items respawn
; Type: boolean
;;;
respawn_super_items = yes

;;;
; If enabled, maps are reset when all players have left the server
; Type: boolean
;;;
restart_empty_map = yes

;;;
; If enabled, will stay on the same level if someone exits the map
; Type: boolean
;;;
same_level = no

;;;
; If enabled, players will respawn in the same spot as where they were killed
; Type: boolean
;;;
same_spawn_spot = no

;;;
; Score that wins a team the game, in teamdm this is frags, in ctf this is flags
; Type: integer
;;;
score_limit = 5

;;;
; Password required to join the server, if blank no password is required
; Type: string
;;;
server_password = 

;;;
; Whether or not clients can display killing spree messages
; Type: boolean
;;;
show_killing_sprees = yes

;;;
; Whether or not clients can display multi-kill messages
; Type: boolean
;;;
show_multi_kills = yes

;;;
; Whether or not players can use the silent bfg technique
; Type: boolean
;;;
silent_bfg = yes

;;;
; Number between 0 and 4 (0 is hey, not too rough and 5 is nightmare)
; Type: integer
;;;
skill = 4

;;;
; Number of messages that can be sent in _spam_window_ seconds before they get the 'talk is cheap' message
; Type: integer
;;;
spam_limit = 4

;;;
; Number of seconds before the spam message count is reset
; Type: integer
;;;
spam_window = 10

;;;
; If enabled, players spawn at the furthest spawn from where they were
; killed
; Type: boolean
;;;
spawn_farthest = no

;;;
; If enabled, players will not receive messages sent by spectators
; Type: boolean
;;;
specs_dont_disturb_players = no

;;;
; If enabled, the server will kick players that exceed a certain speed (lots of false positives)
; Type: boolean
;;;
speed_check = yes

;;;
; Amount of splash damage dealt by rockets and other "missiles"
; Type: percent
;;;
splash_factor = 100

;;;
; If enabled, monsters start with 2x normal health
; Type: boolean
;;;
strong_monsters = no

;;;
; If enabled, autoaim will apply to team members as well
; Type: boolean
;;;
team_autoaim = yes

;;;
; Percent of damage that will be dealt to team members, defaults to 0
; Type: percent
;;;
team_damage = 0

;;;
; Whether or not players receive 'team specific' keys
; Type: boolean
;;;
team_keys = yes

;;;
; Whether or not rockets and other "missiles" can use teleporters
; Type: boolean
;;;
telemissiles = yes

;;;
; Amount of time (in minutes) before a match ends or overtime begins
; (if the match is currently a tie and _overtime_ is enabled)
; Type: integer
;;;
time_limit = 10

;;;
; If enabled, ZDaemon will compensate for player latency
; Type: boolean
;;;
unlagged = yes

;;;
; Whether or not all special lines can block use lines (mapping stuff)
; Type: boolean
;;;
use_blocking = no

;;;
; If enabled, players will receive health when they damage other players
; Type: boolean
;;;
vampire_mode = no

;;;
; Whether or not to spawn voodoo dolls
; Type: boolean
;;;
voodoo_spawns = no

;;;
; Something about friction, too lazy to look up
; Type: boolean
;;;
var_friction = yes

;;;
; Something about moving floors (i think), too lazy to look up
; Type: boolean
;;;
var_pushers = yes

;;;
; Whether or not weapons stay after players pick them up
; Type: boolean
;;;
weapons_stay = yes

;;;
; The website from which wads can be downloaded
; Type: string
;;;
website = http://zdstack.com/notarealaddress

;;;
; The number of votes that occur during a map
; Type: integer
;;;
vote_limit = 30

;;;
; The duration of a vote
; Type: integer
;;;
vote_timeout = 30

;;;
; The minimum percent of players that must vote in order to not count
; non-voters
; Type: percent
;;;
minimum_vote_percent = 50

;;;
; Whether or not to enable kick voting
; Type: boolean
;;;
kick_voting = no

;;;
; The minimum percent of players that must vote 'yes' for a player to
; be kicked
; Type: percent
;;;
kick_vote_percent = 60

;;;
; Whether or not to enable map voting
; Type: boolean
;;;
map_voting = yes

;;;
; Whether or not to enable random map voting
; Type: boolean
;;;
random_map_voting = yes

;;;
; How many maps must be played after a given map for that map to be eligible for voting/play again
; Type: integer
;;;
map_vote_eligibility = 10

;;;
; Whether or not to enable map reset voting
; Type: boolean
;;;
map_reset_voting = yes

;;;
; The minimum percent of players that must vote 'yes' to change to the
; proposed map (potentially random), or reset the current map
; Type: percent
;;;
map_vote_percent = 60

;;;
; Whether or not to enable random captain voting
; Type: boolean
;;;
random_captain_voting = yes

;;;
; Whether or not to enable stats, requires _enable_events_
; Type: boolean
;;;
enable_stats = yes

;;;
; Whether or not to save empty rounds in the database, only valid if _stats_enabled_ is enabled
; Type: boolean
;;;
save_empty_rounds = no

;;;
; Whether or not to save logs
; Type: boolean
;;;
save_log_files = yes

;;;
; Whether or not to use ZDStack's banlist
; Type: boolean
;;;
use_global_banlist = no

;;;
; Whether or not to use ZDStack's whitelist
; Type: boolean
;;;
use_global_whitelist = no

;;;
; Full path to the zserv executable to use
; Type: path
;;;
zserv_exe = %(root_folder)s/bin/zserv

